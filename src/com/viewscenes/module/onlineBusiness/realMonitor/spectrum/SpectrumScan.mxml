<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:system="com.morcha4.frame.system.*" 
				 width="100%" height="100%" creationComplete="init()"
				 PAGE_SHOW="setCode(event)"
				 PAGE_CLOSE="basepage1_PAGE_CLOSEHandler(event)"
				 xmlns:global="com.viewscenes.global.*" xmlns:spectrum="com.viewscenes.module.onlineBusiness.realMonitor.spectrum.*" xmlns:utils="com.viewscenes.utils.*" xmlns:recplay="com.viewscenes.module.onlineBusiness.recplay.*">
	<system:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</system:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:HTTPService id="_spectrumService"  result="resultHandleSpectrum(event)" fault="faultHandle(event)" resultFormat="e4x"/>
	</fx:Declarations>
	<s:HGroup width="100%" paddingTop="10" paddingRight="16" >
		
		<s:VGroup verticalAlign="middle"  width="100%" gap="5"
				  horizontalAlign="center"  id="condition2">			
			<s:HGroup width="100%" >
				<s:HGroup width="100%" height="35" verticalAlign="middle" paddingLeft="16" paddingRight="16" id="condi1">
					<global:HeadendAndStateList id="newHead"  selectChange="changeHeadCode(newHead.oStation.selectedItem)"/>
					<s:Label  text="上报时间" />
					<s:TextInput   width="100" id="_reportTime" text="5" maxChars="6" restrict="0-9"/>
					<s:Label  text="秒       过期时间" />
					<utils:RegExpTextInput   width="100" id="_outTime" text="1" maxChars="6" />
					<s:Label  text="分钟       接收机" />
					<s:DropDownList id="_receiveEqu" width="120" dataProvider="{_receiveEquList}" requireSelection="true"/>
				</s:HGroup>
				<s:Spacer width="100%"/>
				<s:Button buttonMode="true" label="开始" id="_start" click="start();"/>
				<s:Button buttonMode="true" label="停止" enabled="false" id="_stop" click="stop();"/>
				<!--s:Button label="截图" enabled="true" id="_savePic" click="savePicture();"/-->
				<s:Button buttonMode="true" label="截图" enabled="true" id="_savePic"  click="getImg();"/>
			</s:HGroup>
			<s:VGroup width="100%" height="2" verticalAlign="middle" gap="0">
				<s:Line width="100%" yFrom="0" yTo="0"  alpha="0.3">
					<s:stroke>
						<s:SolidColorStroke caps="square" color="0xffffff" weight="1"/>
					</s:stroke>
				</s:Line>
				<s:Line width="100%" yFrom="0" yTo="0" alpha="0.3">
					<s:stroke>
						<s:SolidColorStroke caps="square" color="0x000000" weight="1"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
			<s:HGroup width="100%" height="35" verticalAlign="middle" id="condi2" >
				<s:HGroup id="_bandBox" verticalAlign="middle" paddingLeft="16">
					<s:Label  text="波段" />
					<s:DropDownList id="_band" dataProvider="{bandlist}" change="changeBand();" valueCommit="changeBand();" requireSelection="true"/>
					
				</s:HGroup>
				<s:HGroup id="_freqSEHbox" verticalAlign="middle" paddingLeft="20">
					<s:Label  text="起始频率" />
					<utils:RegExpTextInput regex="{reg}" width="100" id="_startFreq" text="2300"  maxChars="6"/>
					<s:Label id="_stopFreqLabel"  text="(kHz)  结束频率" />
					<utils:RegExpTextInput regex="{reg}" width="100" id="_stopFreq" text="26100"  maxChars="6"/>
					<s:Label id="__stepLabel"  text="(kHz)       步长" />
					<utils:RegExpTextInput regex="{reg}" width="100" id="_step" text="5"  maxChars="6"/>
					<s:Label id="_freqNumLabel" text="(kHz)" />
				</s:HGroup>
				<s:HGroup id="_freqNum" verticalAlign="middle">
					<!--s:Label  text="扫描次数" />
					<utils:RegExpTextInput   width="50" id="scan_count" text="1" maxChars="2" /-->
					<s:Label text="   每秒扫描频率个数" />
					<s:TextInput id="_freqNumIn"  width="50" text="" maxChars="3" restrict="0-9"/>
				</s:HGroup>
				
				
			</s:HGroup>
			<s:VGroup width="100%" height="2" verticalAlign="middle" gap="0">
				<s:Line width="100%" yFrom="0" yTo="0"  alpha="0.3">
					<s:stroke>
						<s:SolidColorStroke caps="square" color="0xffffff" weight="1"/>
					</s:stroke>
				</s:Line>
				<s:Line width="100%" yFrom="0" yTo="0" alpha="0.3">
					<s:stroke>
						<s:SolidColorStroke caps="square" color="0x000000" weight="1"/>
					</s:stroke>
				</s:Line>
			</s:VGroup>
		</s:VGroup>
		
		<!--s:Button label="详细" /-->
	</s:HGroup>
	<s:HGroup width="100%" height="100%" paddingLeft="5" paddingRight="5">
		<spectrum:SpectrumDrawing id="draw" width="100%" height="100%" ownerParent="{this}"/>
		<spectrum:SpectrumFreqDetail id="freqDetail" width="500" visible="false" includeInLayout="false"/>
	</s:HGroup>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.frame.system.AdvancedEvent;
			import com.morcha4.frame.system.EventBus;
			import com.viewscenes.beans.RealtimeUrlCmdBean;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.EventDeclare;
			import com.viewscenes.utils.StringTool;
			import com.viewscenes.utils.player.playBar.PlayBarEvent;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.graphics.ImageSnapshot;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Image;
			
			private var intervalId:uint 	= new uint();	//setInterval返回的id
			private var timeoutID:uint;
			private var action:String 		= "";
			private var realReceiCode:String= "";			//开始扫描后返回的接收机
			private var stoped:Boolean		= true;			//为防止定时停止与手动停止重复发送命令，true为已经停止
			private var units:String        = "kHz";		//画图显示的单位
//			
			[Bindable] private var headcode:String 	= "";	//前端code
			[Bindable] private var headname:String 	= "";	//前端名称
//			
			[Bindable]private var bandlist:ArrayCollection 		= new ArrayCollection([{label:"短波",data:"0"},{label:"中波",data:"1"},{label:"调频",data:"2"}]);
			[Bindable]private var _receiveEquList:ArrayCollection= new ArrayCollection();//接收机列表

			
			//语言
			private var lanaguageArr:ArrayCollection = new ArrayCollection();
			//发射台
			private var stationArr:ArrayCollection = new ArrayCollection();
			//国家
			private var countryArr:ArrayCollection = new ArrayCollection();
			
			
			[Bindable]private var reg:RegExp = /^0.\d*|0.{0,1}|[1-9]\d*.{0,1}\d*$/;
			
			public function init():void{
				EventBus.addEventListener(EventDeclare.SHOW_MENU_2,basepage1_PAGE_CLOSEHandler);
				this.addEventListener("SPECTRUM_SCAN_PLAY_FREQ",playFreq);
				this.addEventListener("SAVA_SPECTRUM_SCAN_LEVEL",setLevel);
				this.freqDetail.player.pb.addEventListener("stop",stopPlayFreq);
				if(this.stoped){
					headcode = newHead.selectedHeadendCode;
					getStationInfo();//获取站点信息
					getLevel();
					
				}
				getLanguageList();
//				getStationList();
				getCountryList();
			}
			var stepFreq:String = "5";
			/**
			 * 播放频点
			 */
			private function playFreq(event:AdvancedEvent):void{
				var playFreq:String = event.data.toString();
				var urlCmdBean:RealtimeUrlCmdBean = buildUrlCmdByFreq(headcode,playFreq,"Start");
				
//				this.urlCmdBean = urlBean;
//				this.freq = urlBean.freq;
				var band:String = StringTool.getBandFromFreq(playFreq);
				
				if (band == "0"){//短波
					stepFreq = "5";
				}else if (band == "1"){//中波
					stepFreq = "10";
				}else if (band == "2"){//调频
					stepFreq = "100";
				}
				//				getRealtimeUrlBack("www.biau.com");
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.online.onlineListen.OnlineService",
					"getRealtimeUrl",urlCmdBean,playFreqBack,DataManager.showErrorMessageBack,true,playFreq,DataManager.server_app_id));
			}
			
			/**
			 * 传入数据播放
			 */
			private function playFreqBack(url:String,pfreq:String):void{
//				player.playUrl(url);
//				player.setText("正在播放...");
				freqDetail.lanaguageArr = lanaguageArr;
				this.freqDetail.playAndMarkReal(url,pfreq,DataManager.getHeadendByCode(headcode));
				this.freqDetail.visible = this.freqDetail.includeInLayout = true;
			}
			/**
			 * 停止播放频点
			 */
			private function stopPlayFreq(event:PlayBarEvent):void{
				if(!this.freqDetail.isRealPlay){
					return;
				}
				this.freqDetail.player.pb.status = "stop";
				
				var playFreq:String = this.freqDetail.currFreq;
				this.freqDetail.currFreq = "";
				var urlCmdBean:RealtimeUrlCmdBean = buildUrlCmdByFreq(headcode,playFreq,"Stop");
				
				//				this.urlCmdBean = urlBean;
				//				this.freq = urlBean.freq;
				var band:String = StringTool.getBandFromFreq(playFreq);
				
				if (band == "0"){//短波
					stepFreq = "5";
				}else if (band == "1"){//中波
					stepFreq = "10";
				}else if (band == "2"){//调频
					stepFreq = "100";
				}
				//				getRealtimeUrlBack("www.biau.com");
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.online.onlineListen.OnlineService",
					"getRealtimeUrl",urlCmdBean,stopPlayFreqBack,DataManager.showErrorMessageBack,true,null,DataManager.server_app_id));
			}
				
			private function stopPlayFreqBack(obj:Object):void{
				
			}
			/**
			 * 
			 * 根据手动输入频率生成发送URL请求指令
			 * */
			private function buildUrlCmdByFreq(headCode:String,freq:String,action:String):RealtimeUrlCmdBean{
				var urlBean:RealtimeUrlCmdBean = new RealtimeUrlCmdBean;
				
				urlBean.freq =  freq;
				urlBean.band =  StringTool.getBandFromFreq(freq);
				urlBean.userid =  DataManager.user.userId;
				urlBean.code =  headCode;
				urlBean.action = action;
				urlBean.priority =  DataManager.user.priority;
				
				return urlBean;
			}
			/**
			 * 取得门限
			 */
			private function getLevel():void{
				var obj:Object = new Object();
				obj.code = newHead.selectedHeadendCode;
				obj.headendID = (newHead.oStation.selectedItem as ResHeadendBean).head_id;
				obj.dataType = "1";//电平
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.online.realtimeMonitor.RealtimeQuality",
					'getLevel',obj,getLevelBack,getLevelError);
				RPCManager.sendCmd(request); 
			}
			private function getLevelBack(obj:Object):void{
				draw._spectrumLevel.text = obj.level;
				draw.m_setSpectrumLevel();
			}
			
			private function getLevelError(error:RPCException):void{
				draw.m_setSpectrumLevel();
			}
			/**
			 * 设置报警参数
			 */
			public function setLevel(event:AdvancedEvent):void{
				var obj:Object = new Object();
				obj.code = newHead.selectedHeadendCode;
				obj.lowlevel = event.data;
				obj.dataType = "1";//电平
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.online.realtimeMonitor.RealtimeQuality",
					'setLevel',obj,setLevelBack,DataManager.alertShowErrorMessageBack,true);
				RPCManager.sendCmd(request); 
			}
			
			private function setLevelBack(str:String):void{
				DataManager.showErrorMessage(str);
			}
			/**
			 * 站点改变
			 */
			private function changeHeadCode(headObj:ResHeadendBean):void{
				if(headObj.code!=null&&headObj.code!=""){
					_start.enabled = false;
				} else{
					return;
				}
				headcode 	= headObj.code;
				headname 	= headObj.shortname;
				getStationInfo();
				_start.enabled = true;
			}
			/**
			 * 获取站点信息
			 */
			private function getStationInfo():void{
				_receiveEquList = new ArrayCollection();
				var obj:Object = new Object();
				obj.headendCode = headcode;
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.online.realtimeMonitor.RealtimeQuality",
					'getHeadendInfo',obj,getStationInfoBack,DataManager.alertShowErrorMessageBack);
				RPCManager.sendCmd(request); 
			}
			/**
			 * 解析站点信息并改变页面显示
			 */
			public function getStationInfoBack(list:ArrayCollection):void{
				var listEqu:ArrayCollection = list.getItemAt(0) as  ArrayCollection;
//				var listPro:ArrayCollection = list.getItemAt(1) as  ArrayCollection;
				_receiveEquList = listEqu;
				//根据获得的站点信息改变页面
				//实时视频模块调用时,频率由实时视频模块传入，不用本模块赋值。
				//				if(realTime==false){
				//					_Freq.text = _channelList.getItemAt(0).data as String;
				//					//					freqChanged();
				//					changeChannel();
				//				} else{
				//					freqChanged();
				//					_frontier.height 	 = 0;//从实时模块调入时隐藏广播和电视选择，因为只有广播调用，电视没调用，默认是广播 
				//				}
			}
			/**
			 * 设置开始后页面个参数不可以更改
			 * isStop 是否停止  true是停止 false不是停止
			 * isBegin 是否是开始下发接口 true是 false是下发接口返回
			 */
			private function setPageEnable(isStop:Boolean,isBegin:Boolean):void
			{
//				condition2.enabled = isStop;
				condi1.enabled = isStop;
				condi2.enabled = isStop;
				newHead.enabled = isStop;
				if(isBegin){
					_start.enabled = false;
					_stop.enabled = false;
				} else{
					_start.enabled = isStop;
					_stop.enabled = !isStop;
				}
			}
			
			/**
			 * 开始频谱扫描
			 */
			private function start():void{
				draw._headcode = headcode;
				if(!freqLegal()){
					return;
				}else{
					stoped = false;
					this.setPageEnable(stoped,true);
					//				setChartParam();
					//				getSpectrumData();//测试使用
					//				getLevel();//获取门限
//					chartDP.removeAll();
//					dicChartDP=new Object;
					sendSpectrumScan("Start");//频谱扫描接口下发
					//getRunPlanData();//获取运行图信息； 此处不获取运行图，真正下发的时候在获取
				}
				
				
			}
			
			//停止扫描
			public function stop():void{
				if(stoped == true){
					//this.setPageEnable(stoped,true);
					return;
				}else{
					stoped = true;
					this.setPageEnable(stoped,false);
					sendSpectrumScan("Stop");//频谱扫描接口下发
				}
			}
			
			/**
			 * 自动停止扫描
			 */
			public function autoStop():void{
				if(stoped == true){
					//this.setPageEnable(stoped,true);
					return;
				}else{
					stoped = true;
					this.setPageEnable(stoped,false);
					clearInterval(timeoutID);
					clearInterval(intervalId);
				}
			}
			
			//检查频率合法性
			private function freqLegal():Boolean{
				if(_band.selectedItem.data=="0"){
					
					if(!(2300<=parseInt(_startFreq.text)&&parseInt(_startFreq.text)<=26100)){
						DataManager.showErrorMessage("输入的频率不合法,短波范围2300~26100");
						return false;
					}
					if(!(2300<=parseInt(_stopFreq.text)&&parseInt(_stopFreq.text)<=26100)){
						DataManager.showErrorMessage("输入的频率不合法,短波范围2300~26100");
						return false;
					}
				}else if(_band.selectedItem.data=="1"){
					if(!(531<=parseInt(_startFreq.text)&&parseInt(_startFreq.text)<=1602)){
						DataManager.showErrorMessage("输入的频率不合法,中波范围531~1602");
						return false;
					}
					if(!(531<=parseInt(_stopFreq.text)&&parseInt(_stopFreq.text)<=1602)){
						DataManager.showErrorMessage("输入的频率不合法,中波范围531~1602");
						return false;
					}
				}else if(_band.selectedItem.data=="2"){
					if(!(87000<=parseInt(_startFreq.text)&&parseInt(_startFreq.text)<=108000)){
						DataManager.showErrorMessage("输入的频率不合法,调频范围87000~108000");
						return false;
					}
					if(!(87000<=parseInt(_stopFreq.text)&&parseInt(_stopFreq.text)<=108000)){
						DataManager.showErrorMessage("输入的频率不合法,调频范围87000~108000");
						return false;
					}
				}
				if(parseInt(_stopFreq.text)<parseInt(_startFreq.text)){
					DataManager.showErrorMessage("输入的频率不合法,开始频率不能大于结束频率");
					return false;
				}
				setChartParam(_band.selectedItem.data);
				return true;
			}
			
			/**
			 * 改变波段
			 */
			private function changeBand():void{
				if(_band.selectedItem.data=="0"){//短波
					this._freqSEHbox.toolTip = "短波广播频率范围2300kHz~26100kHz";
					_startFreq.text = "2300";
					_stopFreq.text  = "26100";
					_step.text = "5";
					units = "kHz";
				}else if(_band.selectedItem.data=="1"){//中波
					this._freqSEHbox.toolTip = "中波广播频率范围531kHz~1602kHz";
					_startFreq.text = "531";
					_stopFreq.text  = "1602";
					_step.text = "9";
					units = "kHz";
				}else if(_band.selectedItem.data=="2"){//调频
					this._freqSEHbox.toolTip = "调频广播频率范围87000~87000kHz";
					_startFreq.text = "87000";
					_stopFreq.text  = "108000";
					_step.text = "100";
					units = "kHz";
				}
				setChartParam(_band.selectedItem.data);
			}
			
			/**
			 * 根据用户的选择设置图表参数
			 */
			private function setChartParam(band:String):void{
				this._freqSEHbox.toolTip = "调频广播频率范围87000~87000kHz";
//				this.draw.m_setChartParam( (parseFloat(_startFreq.text)-10)+"", (parseFloat(_stopFreq.text)+10)+"", "0", "150", units, "dbuv");
				if(band=="2")
				{
				this.draw.m_setChartParam( _startFreq.text, _stopFreq.text, "0", "200", units, "dbuv",band);
				}else
				{
					this.draw.m_setChartParam( _startFreq.text, _stopFreq.text, "0", "100", units, "dbuv",band);
				}
				
			}
			
			/**
			 * 下发实时频谱接口
			 */
			private function sendSpectrumScan(act:String):void{
				var obj:Object = new Object();
				obj = StringTool.addHead(obj);
				action = act;
//				//记录当前扫描的站点
//				if(act=="Start")
//				{
//					this.currentScanHeadend=this.headcode;
//				}
				
				obj.code = headcode;
				
				obj.action = action;
				if(!(parseInt(_reportTime.text)<=60&&parseInt(_reportTime.text)>=1)){
					this.setPageEnable(true,false);
					DataManager.showErrorMessage("上报间隔取值范围：1秒-60秒");
					
					return;
				}
				if(!(parseInt(_outTime.text)>=1)){
					this.setPageEnable(true,false);
					DataManager.showErrorMessage("过期时间取值范围为:大于等于1分钟");
					
					return;
				}
				obj.intervalTime = _reportTime.text;
				
			//obj.expireTime = parseInt(_outTime.text)*60+"";
				obj.expireTime = _outTime.text;
				//obj.scan_count = scan_count.text;
				var equData = _receiveEqu.selectedItem==null?"":_receiveEqu.selectedItem.data;
				//				if(action=="Stop"){
				//					if(type_id=="103"){
				//						equData=realReceiCode;
				//					}
				//				}
				obj.receiverCode = equData;
				var equname:String = _receiveEqu.selectedItem==null?"":_receiveEqu.selectedItem.label;
				
				if(Number(_step.text)>(Number(_stopFreq.text)-Number(_startFreq.text))){
					this.setPageEnable(true,false);
					DataManager.showErrorMessage("步长不能大于结束频率减去开始频率的差值！");
					
					return;
				}
				obj.band = _band.selectedItem.data;
				obj.freqStep = _step.text;
				obj.startFreq = _startFreq.text;
				obj.endFreq = _stopFreq.text;
				
				var frontier:String   = "";
				var freqNumber:String = "";
				freqNumber = _freqNumIn.text;
				obj.freqNumber = freqNumber;
//				xmlText += "<frontier>"+frontier+"</frontier>";
//				xmlText += "<headendtype_id>"+type_id+"</headendtype_id>";
				obj.freq = "";
				obj.type = "0";
				
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.online.realtimeMonitor.RealtimeQuality","getSpectrumRealtimeQuery",obj,getSpectrumBack,getSpectrumBackError,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request);
			}
			
			private function getSpectrumBackError(obj:RPCException):void{
				if(action =="Stop"){
					DataManager.showErrorMessage("停止扫描错误>>>"+obj.message);
				}else{
					DataManager.showErrorMessage("开始扫描错误>>>"+obj.message);
				}
				stoped = true;
				this.setPageEnable(stoped,false);
				clearInterval(intervalId);
				clearInterval(timeoutID);
			}
			
			private function getSpectrumBack(obj:Object):void{
				
				if(action =="Stop"){
					stoped = true;
					this.setPageEnable(stoped,false);
					clearInterval(intervalId);
					clearInterval(timeoutID);
				}else{
					stoped = false;
					this.setPageEnable(stoped,false);
					
					var clientStartTime:String = obj.clientStartTime;
					var realReceiCode:String   = obj.realReceiCode;
					
					//if(this.type_id=="103"){
					for(var i:int=0;i<_receiveEqu.dataProvider.length;i++){
						if(realReceiCode!=""&&_receiveEqu.dataProvider[i].data == realReceiCode){
							_receiveEqu.selectedIndex = i;
						}
					}
					//}
					
					getSpectrumData();
					timeoutID = setTimeout(autoStop,parseInt(_outTime.text)*60*1000);//到了超时时间停止扫描
				}
			}
			private function setCode(event:Event):void{
				if(DataManager.code!=""){
					newHead.oStation.selectedIndex = 1;
					
					for(var i:int=0;i<(newHead.oStation.dataProvider as ArrayCollection).length;i++){
						if(DataManager.code==(newHead.oStation.dataProvider as ArrayCollection)[i].code){
							newHead.oStation.selectedIndex=i;
						}
					}
				}
				
			}
			/**
			 * 获取实时频谱扫描数据
			 */
			private function getSpectrumData():void{
				
//				var sysurl:String = FlexGlobals.topLevelApplication.url;
//				var index:int = sysurl.lastIndexOf("/");
//				var url:String = sysurl.substring(0,index);
//				url = "http://10.15.6.12:8000/hw";//test
				var bandstr:String =  _band.selectedItem.data;
				var frontierstr:String ="";
				
				var url:String = DataManager.dataServerAppAddress;
				url += "/jmaskservlet?function=getGraphData&type=com.viewscenes.web.online.realtimeMonitor.RealtimeQuality";
				url +="&headendcode="+headcode;
				url +="&receivercode="+(_receiveEqu.selectedItem==null?"":_receiveEqu.selectedItem.data);
				url +="&band="+bandstr;
				
				url +="&frequency=";
				url +="&interval="+_reportTime.text;
				url +="&checktime="+parseInt(_outTime.text)*60;
				var serUrl:String = url+"&data=100";
				_spectrumService.url = serUrl+"&ss="+(new Date().time);
				intervalId = setInterval(sendHttpService,1000);
				
			}
			
			private function resultHandleSpectrum(e:ResultEvent):void{
//				var xml:String=e.result.valueOf();
//				for(var i:int=0;i<_chartSpan1.numElements;i++){
//					for(var j:int=0;j<xml.split("#@#").length;j++){
//						if((_chartSpan1.getElementAt(i) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[j].split("<fen>")[0]){
//							(_chartSpan1.getElementAt(i) as QualityDrawing).drawingByData(xml.split("#@#")[j].split("<fen>")[1],xml.split("#@#")[j].split("<fen>")[0]);
//						}
//					}
//				}
//				for(var m:int=0;m<_chartSpan2.numElements;m++){
//					for(var n:int=0;n<xml.split("#@#").length;n++){
//						if((_chartSpan1.getElementAt(m) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[n].split("<fen>")[0]){
//							(_chartSpan1.getElementAt(m) as QualityDrawing).drawingByData(xml.split("#@#")[n].split("<fen>")[1],xml.split("#@#")[n].split("<fen>")[0]);
//						}
//					}
//				}
				var xml:String=e.result.valueOf();
				var tmarry:Array = xml.split("</columns>");
				if(tmarry.length<2){
					return;
				}
				
				var resList:ArrayCollection = new ArrayCollection();
				var dataarry:Array = (tmarry[1] as String).split("$");
				var count:int = 0;
				var DataObj:Object = new Object();
				for(var i:int=0;i<dataarry.length;i++){
					if(count==2){
						DataObj = new Object();
						if(new Number(dataarry[i])<531){
							DataObj.freq =new Number(dataarry[i])*1000+"";
						} else {
							DataObj.freq =parseInt(dataarry[i])+"";
							if(DataObj.freq.length>6){
								Alert.show("dataarry[i]=="+dataarry[i]+"%%DataObj.freq=="+DataObj.freq);
							}
						}
					}
					if(count==3){
						DataObj.spectrum = dataarry[i];
						resList.addItem(DataObj);

					}
					count++;
					if(count==7){
						count = 0;
					}
				}
				
				draw.m_setScanData(resList);
			}
			
			private function faultHandle(e:FaultEvent):void{
				clearInterval(intervalId);
				var sInfo:String = "Error: ";
				sInfo += "网络故障或后台服务停止。\n\n";
				sInfo += "无法获取站点信息，请尝试刷新页面。\n\n";
				sInfo += "详细信息: " + e.fault.faultString+"\n\n";
				DataManager.showErrorMessage(sInfo);
			}
			private function sendHttpService():void{
				_spectrumService.send();
				
			}
			
//			/**
//			 * 页面切换回来调用的方法
//			 */
//			protected function pageShowFun(event:Event):void
//			{
//				newHead.oStation.setDataProviderNew();
//			}

			private function savePicture():void{
				var arr:ArrayCollection = draw.savePicture();
				if(arr == null || arr.length == 0){
					DataManager.showErrorMessage("频谱数据为空");
				}
				var obj:Object = new Object();
				obj.spectrumArr = arr;
				if(DataManager.getHeadendByCode(headcode) == null){
					DataManager.showErrorMessage("站点不能为空");
				} else{
					obj.head_id = DataManager.getHeadendByCode(headcode).head_id;
				}
				obj.headcode = headcode;
				var equData = _receiveEqu.selectedItem==null?"":_receiveEqu.selectedItem.data;
				obj.receiverCode = equData;
				obj.band = _band.selectedItem.data;
				obj.store_datetime = DateUtil.date2str(new Date());
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.online.realtimeMonitor.RealtimeQuality","savePicture",obj,savePictureBack,getSpectrumBackError,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request);
			}
			private function savePictureBack(str:String):void{
				DataManager.showErrorMessage(str);
			}
			
			private var file:FileReference = new FileReference();
			var img:Image;//暂时整舞台的图片
			/* var selectWidth:int;
			var selectHeight:int; */
			/**
			 *  将整个舞台转换成图片 
			 **/
			public function changeToImage():void{
				img=new Image();
				var bmp:BitmapData =ImageSnapshot.captureBitmapData(this);
				//任何可视化对象都可以通过此方法获得其图像。
				img.source=new Bitmap(bmp);
				img.height=this.height;
				img.width=this.width;
				
			}
			
			/**
			 * 截图 得到图片
			 */
			private function getImg():void
			{
				
				//				changeToImage();
				//				var initBD:BitmapData=new BitmapData(img.width, img.height);
				//				initBD.draw(img);
				showImg(); //显示图片
			}
			
			/**
			 * 显示截图的图片预览界面
			 */
			private function showImg():void
			{
				img=new Image();
				var bmp:BitmapData =ImageSnapshot.captureBitmapData(draw);
				//任何可视化对象都可以通过此方法获得其图像。
				img.source=new Bitmap(bmp);
				img.height=this.height;
				img.width=this.width;
				
				
				var ct:CutImageWindow = new CutImageWindow();
				PopUpManager.addPopUp(ct, this, true);
				PopUpManager.centerPopUp(ct);
				ct.cutImg.source = new Bitmap(bmp);
				ct.cutImg.height=draw.height;
				ct.cutImg.width=draw.width;
				var head:String = (newHead.oStation.selectedItem.shortname+'['+newHead.oStation.selectedItem.code+']'+'['+newHead.oStation.selectedItem.state_name+']');
				var fileStr:String = head+"_"+DateUtil.date2str(new Date(),"yyyy年mm月dd日HH时mi分ss秒")+"_"+_startFreq.text+"_"+_stopFreq.text+".jpg";
				ct.filename.text = fileStr;
			}
			
			/**
			 * 
			 * 语言
			 * */
			private function getLanguageList():void{
				var obj:Object = new Object;
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getLanguageList",obj,getLanguageListBack,DataManager.showErrorMessageBack));
			}
			
			private function getLanguageListBack(arr:ArrayCollection):void{
				lanaguageArr = arr;
				freqDetail.lanaguageArr = lanaguageArr;
			}
//			
//			/**
//			 * 
//			 * 发射台
//			 * */
//			private function getStationList():void{
//				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getStationList",null,getStationListBack,DataManager.showErrorMessageBack));
//			}
//			
//			private function getStationListBack(arr:ArrayCollection):void{
//				stationArr = arr;
//				freqDetail.stationArr = stationArr;
//			}
			
			/**
			 * 
			 * 国家
			 * */
			private function getCountryList():void{
				var obj:Object = new Object;
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getCountryList",obj,getCountryListBack,DataManager.showErrorMessageBack));
			}
			
			private function getCountryListBack(arr:ArrayCollection):void{
				countryArr = arr;
				freqDetail.countryArr = countryArr;
			}
			
			/**
			* 关闭页面时，关闭播放器
			*/ 
			protected function basepage1_PAGE_CLOSEHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				freqDetail.player.stop();
			}
		]]>
	</fx:Script>
	
</system:BasePage>
