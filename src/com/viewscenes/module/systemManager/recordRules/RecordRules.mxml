<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:system="com.morcha4.frame.system.*" 
				 width="100%" height="100%"  backgroundColor1="0xe3d4bd" backgroundColor2="0xaf8555" 
				 xmlns:timecomp="com.viewscenes.utils.timecomp.*" xmlns:DataGrid="mor.DataGrid.*" creationComplete="initApp();"
				 xmlns:util="com.viewscenes.utils.*"
				 xmlns:flipBar="com.viewscenes.utils.flipBar.*"
				 xmlns:global="com.viewscenes.global.*">
	
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.editor.ComboBoxEditor;
			import com.morcha4.editor.EditorManager;
			import com.morcha4.editor.TextEditor;
			import com.morcha4.util.RendererUtil;
			import com.viewscenes.beans.ZdicLanguageBean;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.SystemInit;
			import com.viewscenes.utils.timecomp.DateEditor;
			import mx.managers.PopUpManager;
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.CloseEvent;
			import mx.utils.ArrayUtil;
			import mx.utils.ObjectUtil;
			
			import spark.events.GridItemEditorEvent;
			[Bindable]
			private var listStat:ArrayCollection = new ArrayCollection();
			private var insertListStat:ArrayCollection = new ArrayCollection();
			private var updateListStat:ArrayCollection = new ArrayCollection();
			
			[Bindable]private var selectedCounts:int = 0;  //选择总数
			[Bindable]
			private var returnArrayColl:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var headendArr:ArrayCollection = new ArrayCollection();
			private var dellist:String = "";//删除详细数据id (多个id以逗号分隔)
			
			
			public function initApp():void{
				
				for(var i:int=0;i<DataManager.headendNoABArr.length;i++)
				{
					var headend:ResHeadendBean=DataManager.headendNoABArr.getItemAt(i) as ResHeadendBean;
					var obj:Object = new Object();
					obj.head_code=headend.code;
					obj.shortname=headend.shortname;
					returnArrayColl.addItem(obj);
				}
				getHeadend();
			}
			private function getHeadend():void{
				var obj:Object = new Object();
				obj.type_id="all";
				obj.state="all"; 
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getHeadList",obj,getHeadListBack,DataManager.showErrorMessageBack));
			}
			
			private function getHeadListBack(arr:ArrayCollection):void{
				headendArr.removeAll();
				headendArr = arr;
				headendArr.addItemAt({label:"全部",value:""},0);
				station.selectedIndex = 0;
			}
			
			/**
			 * 查询
			 * */
			private function getRules():void
			{ 
				this.clearPage();
				listStat.removeAll();
				con_clewlabel(clew_label,true,'正在查询，请稍候...');
				var obj:Object = new Object();
				//				obj.shortname =shortname.text;
				//				obj.shortname =shortname.text;
				if(this.station.selectedItem.label=="全部"){
					obj.shortname ="";
				}else{
					obj.shortname =this.station.selectedItem.shortname;
				}
				obj.code =code.text;
				pagebar.m_sendCmd(new RORequestParam("com.viewscenes.web.sysmgr.recordRules.RecordRules","getRules",obj,_getRules,onfault));
			}
			
			private function _getRules(list:ArrayCollection):void{ 
				con_clewlabel(clew_label,false);
				this.listStat=list;
				
				listStat.refresh();
				if(listStat.length==0){
					
					con_clewlabel(clew_label,true,"无查询数据！");
				}
			}
			
			
			/**
			 * 控制datagrid的提示框是否显示，以及显示内容
			 * author:cht
			 * **/
			public function con_clewlabel(_component:Label,_visible:Boolean,_label:String="")
			{
				_component.visible=_visible;
				_component.includeInLayout=_visible;
				_component.text=_label;
			}
			
			
			/**
			 * 导出excel
			 * */
			private function getRulesExcel():void
			{
				var url:String="com.viewscenes.web.sysmgr.recordRules.RecordRules";
				var func:String="getRulesExcel";
				
				var head:String = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r';
				head += '<msg type="'+url+'" function="'+func+'">\r';
				var xmlText:String = head;
				//								xmlText += "<headCode>"+headName.selectedItem.code+"</headCode>";
				//								xmlText += "<channel>"+channelName.selectedItem.ch_id+"</channel>";
				//								xmlText += "<FatherType>"+fatherType.selectedItem.dict_type+"</FatherType>";
				//								xmlText += "<SonType>"+sonType.selectedItem.TypeId+"</SonType>";
				//								xmlText += "<isReview>"+is_resume.selectedItem.data+"</isReview>";
				//								xmlText += "<startTime>"+startTime.text+"</startTime>";
				//								xmlText += "<endTime>"+endTime.text+"</endTime>";
				
				xmlText += "</msg>";
				
				flash.external.ExternalInterface.call("toExcel",xmlText);
				
			}
			
			
			//选择点中后执行的方法
			private function changeSelect(obj:Object):void{
				//				Alert.show(obj.data.isSelected);
				if(obj.data.isSelected=="true"){
					this.selectedCounts=selectedCounts+1;  
				}else{
					this.selectedCounts=selectedCounts-1; 
				}
			}
			
			private function clearPage():void{  //下一页或者上一页时需要把选择状态和选择总数清零
				selectedCounts = 0;
				selectAll.selected = false;
			}
			
			
			/**
			 * 选择全部
			 */
			private function selectAllItem():void{
				
				if(listStat == null || listStat.length ==0){
					return;
				}
				var check:Boolean = selectAll.selected;
				
				for(var i:int=0; i<listStat.length; i++){
					var Obj:Object = listStat.getItemAt(i) as Object;
					Obj.isSelected = check.toString();
					//					Alert.show(Obj.isSelected);
				}
				
				listStat.refresh(); //这个必须有，因为Obj.isSelected的值有变化，列表结果的dataProvider需要重新装载，即重新渲染
				if(selectAll.selected){
					selectedCounts = result.dataProvider.length;  //selectedCounts赋值
				} else{
					selectedCounts = 0; 
				}
			}
			
			
			/**
			 * 删除
			 **/
			private function clickDeleteRules():void{
				
				dellist ="";
				var del_number:Number = 0;
				for(var i:int=result.dataProvider.length-1;i>=0;i--)
				{
					if(result.dataProvider[i].isSelected=="true")
					{
						var id:String = result.dataProvider[i].id;
						
						if(del_number==0)
						{
							
							dellist = "'"+id+"'";
							
							
						} else{
							dellist += ","+"'"+id+"'";
						}
						del_number++;
					}
				}
				if(dellist!=""){
					
					Alert.show("您确定删除吗?","删除确认",Alert.YES | Alert.NO,this,clickDeleteChoose);
				}
				else{
					Alert.show("请选择要删除的信息","警告");
					return;
				}
			}
			
			
			//选择删除任务
			private function clickDeleteChoose(event:CloseEvent):void{
				if(event.detail == Alert.NO)
					return;
				deleteDetailData(dellist);
				
			}
			
			
			/**
			 * 删除查询的详细数据
			 **/
			public function deleteDetailData(dellist:String):void{
				selectAll.selected = false;
				//				Alert.show(IdList);
				for(var i:int=result.dataProvider.length-1;i>=0;i--) //在前台删除
				{
					if(result.dataProvider[i].isSelected=="true")
					{
						result.dataProvider.removeItemAt(i);
						this.selectedCounts=selectedCounts-1;
					}
				}
				
				var obj:Object = new Object();//在后台删除
				
				obj.dellist=dellist;
				
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.sysmgr.recordRules.RecordRules","deleteRules",
					obj,_deleteRules,onfault))
				
			}
			
			private function _deleteRules(obj:Object):void{ 
				
				getRules();
				Alert.show("删除成功");
				
			}
			
			//			/**
			//			 * 添加一条详细数据（只在表格中添加，还未提交到后台,所有之查询已处理的报警）
			//			 **/
			//			public function addRulesData():void{
			//				con_clewlabel(clew_label,false,"");
			//				var obj:Object = new Object();
			//				obj.id="";
			//				obj.head_code="";
			//				obj.shortname="";
			//				obj.effect_sleep_time="";
			//				
			//				obj.effect_record_length="";
			//				obj.effect_bps="";
			//				obj.quality_sleep_time="";
			//				obj.quality_record_length="";
			//				obj.quality_bps="";
			//				this.listStat.addItem(obj);
			//				this.selectedCounts=selectedCounts+1;
			//				listStat.refresh();
			//			}
			
			
			
			
			/**
			 * 提交新增和修改的数据
			 **/
			public function commitRules():void{
				
				insertListStat.removeAll();
				updateListStat.removeAll();
				for(var i:int=0;i<listStat.length;i++){
					if(listStat.getItemAt(i).isSelected=="true"){
						
						if(listStat.getItemAt(i).id ==""){//说明是插入操作
							insertListStat.addItem(listStat.getItemAt(i));
							
						}
						else{//说明是插入更新
							updateListStat.addItem(listStat.getItemAt(i));
						}
					}
				}
				
				if(insertListStat.length==0&&updateListStat.length==0){
					Alert.show("请选择要确认的信息");
				}
				else{
					var obj:Object = new Object();
					obj.insert=insertListStat;
					obj.update=updateListStat;
					RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.sysmgr.recordRules.RecordRules","modifyRules",obj,resultCommitAllRules,onfault));
				}
			}
			
			private function resultCommitAllRules(obj:Object):void{ 
				var resultList:ArrayCollection =new ArrayCollection;
				resultList=obj as ArrayCollection;
				Alert.show("操作成功,成功插入"+resultList.getItemAt(0).toString()+"条,成功更新"+resultList.getItemAt(1).toString()+"条");
				
				getRules();
			}
			
			
			private function onfault(e:RPCException):void
			{
				
				Alert.show(e.message);
			}
			
			/**
			 * 导出txt
			 * */
			private function getRulesTxt():void
			{
				var url:String="com.viewscenes.web.sysmgr.recordRules.RecordRules";
				var func:String="getRulesTxt";
				
				var head:String = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r';
				head += '<msg type="'+url+'" function="'+func+'">\r';
				var xmlText:String = head;
				xmlText += "</msg>";
				
				flash.external.ExternalInterface.call("toExcel",xmlText);
				
			}
			
			
			private function onEditStart(event:GridItemEditorEvent):void
			{
				var dataField:String=EditorManager.getRelatedField(event);
				var data:Object=EditorManager.getRelatedData(event);
				
				switch(dataField){
					
					case "前端名称":{  
						ComboBoxEditor.dataProvider=returnArrayColl;
						break;
					} 
						
					case "效果录音间间隔":{
						com.viewscenes.utils.timecomp.DateEditor.dateDisplayType="time";
					}
					case "效果录音长度":{
						com.viewscenes.utils.timecomp.DateEditor.dateDisplayType="time";
					}
					case "质量录音间隔":{
						com.viewscenes.utils.timecomp.DateEditor.dateDisplayType="time";
					}
					case "质量录音长度":{
						com.viewscenes.utils.timecomp.DateEditor.dateDisplayType="time";
					}
					case "效果录音码率":{  
						ComboBoxEditor.dataProvider=new ArrayCollection(
							[ {effect_bps:"8000", effect_bps:"8000"}, 
								{effect_bps:"16000", effect_bps:"16000"},
								{effect_bps:"32000", effect_bps:"32000"},
								{effect_bps:"64000", effect_bps:"64000"},
								{effect_bps:"128000", effect_bps:"128000"} ]);
						break;
					}
					case "质量录音码率":{  
						ComboBoxEditor.dataProvider=new ArrayCollection(
							[ {quality_bps:"8000", quality_bps:"8000"}, 
								{quality_bps:"16000", quality_bps:"16000"},
								{quality_bps:"32000", quality_bps:"32000"},
								{quality_bps:"64000", quality_bps:"64000"},
								{quality_bps:"128000", quality_bps:"128000"} ]);
						break;
					}
						
				}
			}
			
			protected function addRulesData():void
			{
				var pop:AddRulesForm = AddRulesForm(PopUpManager.createPopUp(this,AddRulesForm,true));
				PopUpManager.centerPopUp(pop);
				//				pop.addEventListener("roleListRefresh",getRoleList);
				pop.addEventListener("Rules_list_refresh",refreshRulesList);
			}
			protected function refreshRulesList(event:Event):void
			{
				// TODO Auto-generated method stub
				getRules();
				
			}
			
		]]>
	</fx:Script>
	
	
	<s:VGroup width="100%" height="100%">
		
		<s:HGroup width="100%"  horizontalAlign="right" verticalAlign="middle">
			<s:HGroup left="9" right="9" horizontalAlign="left" verticalAlign="middle" width="100%" height="40">
				<s:Label text="站点前端简称：" id="StationCodeLable"/>
				<s:Spacer width="12"/>
				<s:ComboBox id="station" width="180" dataProvider="{headendArr}"/>
				
				<s:Label width="80" textAlign="right" text="站点代码："  fontSize="12"/>
				<s:TextInput width="100"  id="code" restrict="a-z\A-Z\0-9" maxChars="20"/>
			</s:HGroup>
			<s:Button buttonMode="true" label="查 询" width="100" click="getRules();"/>
			<s:Button buttonMode="true" id="addset" width="100" label="添加"  click="addRulesData()"/>
			<s:Button buttonMode="true" id="updateset" width="100" label="编辑确认"  click="commitRules()"/>
			<s:Button buttonMode="true" id="delset" width="100" label="删除所选"  click="clickDeleteRules()"/>
			<!--s:Button label="导出Excel" width="100" click="getRulesExcel();"/>
			<s:Button buttonMode="true" label="导出数据" width="100" click="getRulesTxt();"/-->
		</s:HGroup>
		
		
		<s:Group width="100%" height="100%">
			<s:DataGrid id="result" width="100%" height="100%" dataProvider="{listStat}" editable="true" textAlign="center" gridItemEditorSessionStarting="onEditStart(event)" >
				<s:columns>
					<s:ArrayCollection>
						<s:GridColumn  headerText="选择" width="60" editable="false" itemRenderer="{RendererUtil.getCheckBoxRenderer(changeSelect)}"  />
						<s:GridColumn dataField="shortname" headerText="前端名称" itemEditor="com.morcha4.editor.ComboBoxEditor" />
						<s:GridColumn dataField="head_code" headerText="前端代码" editable="false" />
						<s:GridColumn dataField="effect_sleep_time" headerText="效果录音间隔" itemEditor="com.viewscenes.utils.timecomp.DateEditor" />
						<s:GridColumn dataField="effect_record_length" headerText="效果录音长度" itemEditor="com.viewscenes.utils.timecomp.DateEditor" />
						<s:GridColumn dataField="effect_bps" headerText="效果录音码率" itemEditor="com.morcha4.editor.ComboBoxEditor" />
						<s:GridColumn dataField="quality_sleep_time" headerText="质量录音间隔" itemEditor="com.viewscenes.utils.timecomp.DateEditor" />
						<s:GridColumn dataField="quality_record_length" headerText="质量录音长度" itemEditor="com.viewscenes.utils.timecomp.DateEditor" />
						<s:GridColumn dataField="quality_bps" headerText="质量录音码率" itemEditor="com.morcha4.editor.ComboBoxEditor" />
					</s:ArrayCollection>
				</s:columns>
			</s:DataGrid>
			<s:Label text="正在查询，请稍候..."  color="0x000000" id="clew_label" y="{result.columnHeaderGroup.height+10}" width="100%" textAlign="center" visible="false" includeInLayout="false"  />		
		</s:Group>	
		
		
		<s:HGroup  width="100%" height="30" verticalAlign="middle" gap="10">
			<s:CheckBox id="selectAll" selected="false" change="selectAllItem()"/>
			<s:Label text="全选"/> 
			
			<s:Label width="20"/>
			
			<!--分页组件所在地-->
			<flipBar:PageBar  id="pagebar" rowConutOfPage="25" totalPageQuery="10" height="20"/>
			
			<!--flipBar:PageBar width="100%" id="pagebar" rowConutOfPage="20" totalPageQuery="5" height="20"/-->
		</s:HGroup> 
		
	</s:VGroup>
	
	
	
</system:BasePage>	
