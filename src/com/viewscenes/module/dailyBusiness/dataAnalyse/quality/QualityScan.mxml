<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" 
				 xmlns:system="com.morcha4.frame.system.*" 
				 width="100%" height="100%" creationComplete="init()"
				 xmlns:global="com.viewscenes.global.*" xmlns:timecomp="com.viewscenes.utils.timecomp.*">
	<system:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
	</system:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
		<s:HTTPService id="_spectrumService"    fault="faultHandle(event)" resultFormat="e4x"/>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.utils.SendXmlService;
			import com.viewscenes.utils.StringTool;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.rpc.events.FaultEvent;
			
			import spark.validators.NumberValidator;
			
			private var action:String = "";
			[Bindable]private var headcode:String 	= "";	//前端code
			[Bindable]private var headname:String 	= "";	//前端名称
			private var type_id:String 		= "";			//101,遥控站，102采集点，103边境
//			private var headversion:String 	= "";			//版本
			//			private var headendMaker:String = "";			//生产商
			private var dataType:String 	= "";
			private var level:String		= "";			//电平
			private var intervalId:uint 	=new uint();	//setInterval返回的id
			private var timeoutID:uint;
			private var band:String			= "";			//波段"0"：短波；"1"：中波；"2"：调频  ;""，全选
			private var stoped:Boolean		= true;		    //为防止定时停止与手动停止重复发送命令，true为已经停止
			private var realTime:Boolean    = false;        //是否为实时视频模块调用
			
			[Bindable] private var arr:ArrayCollection = new ArrayCollection();
			[Bindable] private var chList:ArrayCollection = new ArrayCollection();
			[Bindable] private var _channelList:ArrayCollection = new ArrayCollection(
				[{label:"指定频率",data:""}]);				//频道列表
			[Bindable] private var chartDP:ArrayCollection = new ArrayCollection();				//指标图数据
//			[Bindable] private var _receiveEquList:ArrayCollection = new ArrayCollection();		//接收机列表
			[Bindable] private var _checkedList:ArrayCollection = new ArrayCollection();		//选择的指标
			private var isFromReal:Boolean = false;				//是否为在线试听页面调用
			private var service:SendXmlService = new SendXmlService();
			
			public function init():void{
					queryDate.addEventListener("TimeNewChanged",queryDateChange);
					this.queryDateChange(null);				
					headcode = newHead.selectedHeadendCode;
//					getStationInfo();//获取站点信息
//					validateInput();
			}
			/**
			 * 实时模块调用
			 * obj对象的三个属性headCode站点代码
			 * 				   freq频率
			 * 				   qualityTypes指标类型，如_zbLevelV8,_ppV8,_tzdzdzV8
			 */
			public function setRealTime(obj:Object):void{
				this.realTime = true;
				condition.visible = false;
				condition.includeInLayout = false;
				headcode =obj.headCode;
				_Freq.text = obj.freq;
				var quaType:String = obj.qualityTypes;
				checkBoxInit(false);
				if(quaType.indexOf(_zbLevelV8.id)>-1){
					_zbLevelV8.selected	  = true;		//载波电平实时查询  1
				}
//				if(quaType.indexOf(_tzdqpdclz.id)>-1){
//				 	_tzdqpdclz.selected   = true;		//调制度全频段测量值   2
//				}
				if(quaType.indexOf(_tzdzdzV8.id)>-1){
				 	_tzdzdzV8.selected	  = true;		//调制度最大值  5
				}
				if(quaType.indexOf(_tfdV8.id)>-1){
				 	_tfdV8.selected		  = true;		//调幅度  3
				}
				if(quaType.indexOf(_ppV8.id)>-1){
				 	_ppV8.selected		  = true;		//频偏实时查询  6
				}
				if(quaType.indexOf(_BandWidth.id)>-1){
				 	_BandWidth.selected	  = true;		//带宽  8
				}
				 
			}
			/**
			 * 验证输入
			 */
			private function validateInput():void{
				var numv:NumberValidator  = new NumberValidator();
				numv.invalidCharError = "必须为数字,请重新输入";
				numv.requiredFieldError="该项为必须输入项";
				numv.property 		  = "text";
				numv.source   		  = _Freq;
				numv.trigger		  = _Freq;
				numv.triggerEvent     = "focusOut";
				
			}
			/**
			 * 站点改变
			 */
			private function changeHeadCode(headObj:ResHeadendBean):void{
				if(headObj.code!=null&&headObj.code!=""){
					_start.enabled = false;
				} else{
					return;
				}
				headcode 	= headObj.code;
				headname 	= headObj.shortname;
//				headversion = headObj.version;
				type_id 	= headObj.type_id;//站点类型103边境
//				getStationInfo();
				_start.enabled = true;
			}
			
//			/**
//			 * 获取站点信息
//			 */
//			private function getStationInfo():void{
//				if(realTime){
//					return;
//				}
//				_channelList.removeAll();
////				_receiveEquList = new ArrayCollection();
//				var obj:Object = new Object();
//				obj.headendCode = headcode;
//				var request:RORequestParam = new RORequestParam("com.viewscenes.web.daily.dataAnalyse.DataAnalyse",
//					'getHeadendInfo',obj,getStationInfoBack,DataManager.alertShowErrorMessageBack);
//				RPCManager.sendCmd(request); 
//			}
//			/**
//			 * 解析站点信息并改变页面显示
//			 */
//			public function getStationInfoBack(list:ArrayCollection):void{
////				var listEqu:ArrayCollection = list.getItemAt(0) as  ArrayCollection;
//				var listPro:ArrayCollection = list.getItemAt(0) as  ArrayCollection;
////				_receiveEquList = listEqu;
//				_channelList = listPro;
//				validateInput();
//				//根据获得的站点信息改变页面
//				//实时视频模块调用时,频率由实时视频模块传入，不用本模块赋值。
//				//				if(realTime==false){
//				//					_Freq.text = _channelList.getItemAt(0).data as String;
//				//					//					freqChanged();
//				//					changeChannel();
//				//				} else{
//				//					freqChanged();
//				//					_frontier.height 	 = 0;//从实时模块调入时隐藏广播和电视选择，因为只有广播调用，电视没调用，默认是广播 
//				//				}
//			}
			//手动修改频点时判断波段值
			private function freqChanged():void{
				var ischange:Boolean = false;
				if(_Freq.text!=""&&_Freq.text!=null){
					var freq:Number = parseInt(_Freq.text);
					if (freq>=531 && freq<=1602){
						band = "1";
					}else if(freq>=2300 && freq<=26100){ 
						band = "0";
					}else if(freq>=87000 && freq<=108000){
						band = "2";
					}
					checkBoxInit();
					changeByBand();
					
				}
			}
			
			/**
			 * 检测频率是否合法
			 */
			private function checkFreq(checkFreq:String):String{
				var res:String = "";
				if(checkFreq!=""&&checkFreq!=null){
					var freq:Number = parseFloat(checkFreq);
					if (freq>=531 && freq<=1602){
						band = "1";
					}else if(freq>=2300 && freq<=26100){ 
						band = "0";
					}else if(freq>=87000 && freq<=108000){
						band = "2";
					}else{
						res = "error";
					}
				}
				else{
					res = "error";
				}
				return res;
			}
			//根据波段值判断不同指标是否显示
			private function changeByBand():void{
				_configTabS2.visible = false;
				_configTabS2.includeInLayout = false;
				_configTabS1.visible = false;
				_configTabS1.includeInLayout = false;
//				_configFM_ModulationV8.visible = false;
//				_configFM_ModulationV8.includeInLayout=false;
				
				
				switch(band){
					case "0":
						//采集点、遥控站
						//							_configTabS1.width = 520;
						//							_configTabS2.width = 0;
						_configTabS1.visible = true;
						_configTabS1.includeInLayout = true;
						_configTabS2.visible = false;
						_configTabS2.includeInLayout = false;
						break;
					case "1":
						//采集点、遥控站
						//							_configTabS1.width = 520;
						//							_configTabS2.width = 0;
						_configTabS1.visible = true;
						_configTabS1.includeInLayout = true;
						_configTabS2.visible = false;
						_configTabS2.includeInLayout = false;
						break;
					case "2":
						//采集点、遥控站
						//							_configTabS1.width = 0;
						//							_configTabS2.width = 460;
						_configTabS1.visible = false;
						_configTabS1.includeInLayout = false;
						_configTabS2.visible = true;
						_configTabS2.includeInLayout = true;
						//							if(type_id=="102"){
						//								_configFM_ModulationV8.visible = false;
						//								_configFM_ModulationV8.includeInLayout=false;
						//							} else{
//						_configFM_ModulationV8.visible = true;
//						_configFM_ModulationV8.includeInLayout=true;
						//							}
						break;
				}
			}
			
			//恢复到未选择状态
			private function checkBoxInit(boo:Boolean=true):void{
				
				//V8
				_zbLevelV8.selected	  = boo;		//载波电平实时查询  1
//				_tzdqpdclz.selected   = boo;		//调制度全频段测量值   2
				_tzdzdzV8.selected	  = boo;		//调制度最大值  5
				_tfdV8.selected		  = boo;		//调幅度  3
				_ppV8.selected		  = boo;		//频偏实时查询  6
				_BandWidth.selected	  = boo;		//带宽  8
				
				_checkedList.removeAll();
			}
			//选择指标，把选择的项记录下来
			private function dealCheckBox(event:Event):void{
				var tmch:CheckBox = event.target as CheckBox;
				var tmstr:String  = tmch.id;
				if(tmch.selected==false&&_checkedList.contains(tmstr)){
					var index:Number = _checkedList.getItemIndex(tmstr);
					_checkedList.removeItemAt(index);
				}else{
					_checkedList.addItem(tmstr);
				}
			}
			//选择指标，把选择的项记录下来
			private function dealCheckBoxCommit(tmch:CheckBox):void{
				var tmstr:String  = tmch.id;
				if(_checkedList.contains(tmstr)){
					
				}else{
					_checkedList.addItem(tmstr);
				}
			}
//			private function changeChannel():void{
//				if(realTime==false&&_channelName.selectedItem!=null){
//					_Freq.text = _channelName.selectedItem.data;
////					_Freq.setFocus();
////					_outTime.setFocus();
////					_Freq.setFocus();
//					freqChanged();
//				}
//			}
			
			/**
			 * 设置开始后页面个参数不可以更改
			 * isStop 是否停止  true是停止 false不是停止
			 * isBegin 是否是开始下发接口 true是 false是下发接口返回
			 */
			private function setPageEnable(isStop:Boolean,isBegin:Boolean):void
			{
//				if(isBegin){
//					_start.enabled = false;
//					_stop.enabled = false;
//				} else{
//					_start.enabled = isStop;
//					_stop.enabled = !isStop;
//				}
//				if(!isFromReal){
//					this.newHead.enabled = isStop;
//				}
//				condition1.enabled = isStop;
//				detial.enabled = isStop;
////				_V8.enabled = isStop;
//				_Station_Channel.enabled = isStop;
			}
			/**
			 * 开始扫描
			 */
			public function start():void{
				//测试临时使用
//				getSpectrumData();
//				return;
				
				stoped = false;
				this.setPageEnable(stoped,true);
				sendSpectrumScan("Start");			//指标扫描接口下发
				
			}
			
			
			/**
			 * 停止扫描
			 */
			public function stop(freqtemp:String=""):void{
				if(stoped == true){
					return;
				}else{
					stoped = true;
					this.setPageEnable(stoped,true);
					//						sendSpectrumScanStop(freqtemp);
					sendSpectrumScan("Stop");
				}
				
			}
			/**
			 * 自动停止扫描
			 */
			public function autoStop():void{
				if(stoped == true){
					return;
				}else{
					stoped = true;
					this.setPageEnable(stoped,false);
					clearInterval(timeoutID);
					clearInterval(intervalId);
				}
			}
			
			/**
			 * 下发实时指标接口
			 */
			private function sendSpectrumScan(act:String):void{
				var obj:Object = new Object();
				var codeNoAB:String = newHead.oStation.getHeadCode;
				var codeAB:String = newHead.oStation.getHeadABCode;
				var receiveEqu:String = newHead.oStation.getEquTypeValue;
				obj.receiverCode = receiveEqu;
//				obj.code = headcode;
				if(codeNoAB == ""){
					obj.headendID = "";
				} else{
					if(codeAB == ""){
						var hh:Object = newHead.oStation.headend.selectedItem;
						if(hh.type_id == "101"){
							var head:ResHeadendBean = DataManager.getHeadendByCode(codeNoAB);
							if(head==null){
								obj.headendID = "-1";
							} else{
								obj.headendID = head.head_id;
							}
						} else if(hh.type_id == "102"){//遥控站
							var head:ResHeadendBean = DataManager.getHeadendByCode(codeNoAB+"A");
							var headID:String = "";
							if(head==null){
								headID = "-1";
							} else{
								headID = head.head_id;
							}
							head = DataManager.getHeadendByCode(codeNoAB+"B");
							if(head==null){
								headID = headID+",-1";
							} else{
								headID = headID +","+ head.head_id;
							}
							obj.headendID = headID;
						}
						
					} else{
						var head:ResHeadendBean = DataManager.getHeadendByCode(codeAB);
						if(head==null){
							obj.headendID = "-1";
						} else{
							obj.headendID = head.head_id;
						}
					}
				}
				obj = StringTool.addHead(obj);
				if(_Freq.text==""){
					stoped = true;
					this.setPageEnable(stoped,false);
					DataManager.alertShowErrorMessage("请指定频率！");
					
					return;
				}
				var temp:String = this.checkFreq(_Freq.text);
				if(temp=="error"){
					DataManager.alertShowErrorMessage("请输入正确频率");
					stoped = true;
					this.setPageEnable(stoped,false);
					_Freq.setFocus();
					return;
				}
				obj.freq = _Freq.text;
				obj.intervalTime = _reportTime.text;
				obj.expireTime = parseInt(_outTime.text)*60+"";
				if(_reportTime.text==""){
					DataManager.alertShowErrorMessage("上报时间不能为空");
					stoped = true;
					this.setPageEnable(stoped,false);
					return;
				}
				if(_outTime.text==""){
					DataManager.alertShowErrorMessage("请输入超时时间");
					_outTime.text = "1";
					stoped = true;
					this.setPageEnable(stoped,false);
					return;
				}
				var bandstr:String = band;
				obj.band = bandstr;
				
				obj.startTime = queryDate.text+" "+beginTime.text;
				obj.endTime = queryDate.text+" "+endTime.text;
				if(DateUtil.compareDateStr(obj.startTime,obj.endTime)>=0){
					Alert.show("开始时间不能大于结束时间！");
					return;
				}
				
				var typeCondition:String = "";
				_checkedList.removeAll();
				//载波电平实时查询  1
				if(_zbLevelV8.selected == true) {
					dealCheckBoxCommit(_zbLevelV8);
					obj.levelV8 = "1";
					obj.sNLevelV8 = _zbLevelV8Data.text;
					typeCondition += ",1";
				}
				//偏频实时查询  6
				if((band=="0"||band=="1")&&_ppV8.selected == true) {
					dealCheckBoxCommit(_ppV8);
					obj.offsetV8 = "6";
					obj.sNOffsetV8 = _ppV8Data.text;
					typeCondition += ",6";
				}
				//调制度全频段测量值   2
//				if(band=="2"&&(type_id=="101"||type_id=="102")&&_tzdqpdclz.selected == true) {
//					dealCheckBoxCommit(_tzdqpdclz);
//					obj.fmModulationV8 = "2";
//					obj.sNFmModulationV8 = _tzdqpdclzData.text;
//					typeCondition += ",2";
//				}
				//带宽  8
				if(_BandWidth.selected == true) {
					dealCheckBoxCommit(_BandWidth);
					obj.bandWidthV8 = "8";
					obj.sNBandWidthV8 = _BandWidthData.text;
					typeCondition += ",8";
				}
				
				//调制度最大值  5
				if(band=="2"&&_tzdzdzV8.selected == true) {
					dealCheckBoxCommit(_tzdzdzV8);
					obj.fmModulationMaxV8 = "5";
					obj.sNFmModulationMaxV8 = _tzdzdzV8Data.text;
					typeCondition += ",5";
				}
				//调幅度  3
				if((band=="0"||band=="1")&&_tfdV8.selected == true) {
					dealCheckBoxCommit(_tfdV8);
					obj.amModulationV8 = "3";
					obj.sNAmModulationV8 = _tfdV8Data.text;
					typeCondition += ",3";
				}
				
				
				if(typeCondition==""){
					DataManager.alertShowErrorMessage("请至少选择一种指标");
					stoped = true;
					this.setPageEnable(stoped,false);
					return;
				}else{
					typeCondition = typeCondition.substring((typeCondition.indexOf(",")+1),typeCondition.length);
				}
				
				obj.typeCondition = typeCondition;
				createChartByCheckBox();
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.daily.dataAnalyse.DataAnalyse","queryHistoryQualityData",obj,getSpectrumBack,DataManager.alertShowErrorMessageBack);
				RPCManager.sendCmd(request);
			}
			private function getSpectrumBack(obj:String):void{
				resultHandleSpectrum(obj);
			}
			
			
			//根据选择的指标创建图表
			//布局：左侧3个，右侧2个.最多显示5个图
			private function createChartByCheckBox():void{
				var charttype:String = "";			//人为的给图表分类，方便lineChart画图
				var data:String = "";				
				//其他的 1电平 3 调幅度8带宽6频偏2瞬时调制度分布5调制度
				var tmlength:Number = _checkedList.length;
				// 根据图表个数划分图表空间
				_chartSpan1.removeAllElements();
				_chartSpan2.removeAllElements();
				//设置每个图的Height
				
				
				
				var datas:String = "";
				//创建图表组件					
				for(var i:int=0;i<_checkedList.length;i++){
					var paramObj:Object = new Object();
					var tmstr:String = _checkedList[i] as String;
					var titleName:String = "";
					if(tmstr=="_zbLevelV8"){
						paramObj.qualityType = "1";//1、载波电平 		Y:0~255,X:时间	Y单位: uV
						paramObj.qualityName = "电平指标";
						paramObj.minValue = "0";
						paramObj.maxValue = "255";
						paramObj.valueUnits = "uV";
						paramObj.levelType = "A";
						paramObj.isInDb = false;
//					}else if(tmstr=="_tzdqpdclz"){
//						paramObj.qualityType = "2";//2、瞬时调制度分布 Y:-60~0,	X:-150~150 X单位：KHZ调制度   特别处：竖线
//						paramObj.qualityName = "瞬时调制度分布指标";
//						paramObj.minValue = "-150";
//						paramObj.maxValue = "150";
//						paramObj.valueUnits = "KHz";
//						paramObj.levelType = "A";
//						paramObj.isInDb = false;	
					} else if(tmstr=="_tfdV8"){
						paramObj.qualityType = "3";//3、调幅度		Y:0~100,	X:时间		Y单位: %调幅度	2条门限,
						paramObj.qualityName = "调幅度指标";
						paramObj.minValue = "0";
						paramObj.maxValue = "100";
						paramObj.valueUnits = "%";
						paramObj.levelType = "B";
						paramObj.isInDb = false;
					} else if(tmstr=="_tzdzdzV8"){
						paramObj.qualityType = "5";//5、调制度最大值 	Y:-150~150,	X:时间		Y单位: KHZ		2条门限,2条折线
						paramObj.qualityName = "调制度指标";
						paramObj.minValue = "-150";
						paramObj.maxValue = "150";
						paramObj.valueUnits = "KHz";
						paramObj.levelType = "D";
						paramObj.isInDb = false;
					} else if(tmstr=="_ppV8"){
						paramObj.qualityType = "6";//6、频偏指标		Y:-100~100,	X:时间		Y单位：HZ频偏		2条门限,
						paramObj.qualityName = "频偏指标";
						paramObj.minValue = "-150";
						paramObj.maxValue = "150";
						paramObj.valueUnits = "Hz";
						paramObj.levelType = "C";
						paramObj.isInDb = false;
					} else if(tmstr=="_BandWidth"){
						paramObj.qualityType = "8";//8、带宽指标 	Y：0~200	 	X:时间		Y单位：KHZ带宽
						paramObj.qualityName = "带宽指标";
						paramObj.minValue = "0";
						paramObj.maxValue = "200";
						paramObj.valueUnits = "KHz";
						paramObj.levelType = "E";
						paramObj.isInDb = false;
					}
					datas += paramObj.qualityType+",";
					
					
					
					
					var draw:QualityDrawing = new QualityDrawing();
					draw.percentHeight = 100;
					if(tmlength<=2){
						if(tmlength == 1){
							draw.percentWidth = 100;
						} else if(tmlength == 2){
							draw.percentWidth = 50;
						}
						_chartSpan1.percentHeight = 100;
						_chartSpan2.percentHeight = 0;
					} else if(tmlength>2){
//						if(tmlength == 4){
//							draw.percentWidth = 50;
//						} else if(tmlength == 5){
//							if(i<3){
//								draw.percentWidth = 33;
//							} else{
//								draw.percentWidth = 50;
//							}
//						} else if(tmlength == 6){
//							draw.percentWidth = 33;
//						}
						if(i<2){
							draw.percentWidth = 50;
						} else{
							draw.percentWidth = 100;
						}
						_chartSpan1.percentHeight = 50;
						_chartSpan2.percentHeight = 50;
					}
					if(realTime){
						draw.percentWidth = 100;
						draw.percentHeight = 100;
						_chartSpan1.percentHeight = 0;
						_chartSpan2.percentHeight = 0;
						_chartSpanReal.percentHeight = 100;
						_chartSpanReal.addElement(draw);
					} else{
						_chartSpanReal.percentHeight = 0;
						if(tmlength == 4){
							if(i<2){
								_chartSpan1.addElement(draw);
							} else {
								_chartSpan2.addElement(draw);
							}
						} else{
							if(i<2){
								_chartSpan1.addElement(draw);
							} else {
								_chartSpan2.addElement(draw);
							}
						}
					}
					
					draw.id = "drawDataType_"+paramObj.qualityType;
					
					draw.paramObj = paramObj;
//					draw.m_setChartParams(null);
				}
				if(datas.indexOf(",")>-1){
					datas = datas.substr(0,datas.lastIndexOf(","));
				}
			}
			
			private function resultHandleSpectrum(xml:String):void{
//				for(var i:int=0;i<_chartSpan1.numElements;i++){
//					for(var j:int=0;j<xml.split("#@#").length;j++){
//						if((_chartSpan1.getElementAt(i) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[j].split("<fen>")[0]){
//							(_chartSpan1.getElementAt(i) as QualityDrawing).drawingByData(xml.split("#@#")[j].split("<fen>")[1],xml.split("#@#")[j].split("<fen>")[0]);
//						}
//					}
//				}
//				for(var m:int=0;m<_chartSpan2.numElements;m++){
//					for(var n:int=0;n<xml.split("#@#").length;n++){
//						if((_chartSpan1.getElementAt(m) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[n].split("<fen>")[0]){
//							(_chartSpan1.getElementAt(m) as QualityDrawing).drawingByData(xml.split("#@#")[n].split("<fen>")[1],xml.split("#@#")[n].split("<fen>")[0]);
//						}
//					}
//				}
				var nxml:XML = new XML(xml);
				nxml.child("xml").toString();
				xml = xml.replace("<xml>","");
				xml = xml.replace("</xml>","");
				for(var i:int=0;i<_chartSpan1.numElements;i++){
					for(var j:int=0;j<xml.split("#@#").length;j++){
						//						trace('xml'+xml);
						//						trace('xml.split("#@#")[j]'+xml.split("#@#")[j]);
//												trace('xml.split("#@#")[j].split("#fen#")[0]=='+xml.split("#@#")[j].split("#fen#")[0]);
						if((_chartSpan1.getElementAt(i) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[j].split("#fen#")[0]){
							(_chartSpan1.getElementAt(i) as QualityDrawing).drawingByData(xml.split("#@#")[j].split("#fen#")[1],xml.split("#@#")[j].split("#fen#")[0]);
						}
						
					}
				}
				for(var m:int=0;m<_chartSpan2.numElements;m++){
					for(var n:int=0;n<xml.split("#@#").length;n++){
						if((_chartSpan2.getElementAt(m) as QualityDrawing).id.replace("drawDataType_","") ==xml.split("#@#")[n].split("#fen#")[0]){
							(_chartSpan2.getElementAt(m) as QualityDrawing).drawingByData(xml.split("#@#")[n].split("#fen#")[1],xml.split("#@#")[n].split("#fen#")[0]);
						}
					}
				}
			}
			
			private function faultHandle(e:FaultEvent):void{
				clearInterval(intervalId);
				var sInfo:String = "Error: ";
				sInfo += "网络故障或后台服务停止。\n\n";
				sInfo += "无法获取站点信息，请尝试刷新页面。\n\n";
				sInfo += "详细信息: " + e.fault.faultString+"\n\n";
				DataManager.alertShowErrorMessage(sInfo);
			}
			private function sendHttpService():void{
				_spectrumService.send();
				
			}
			
			/**
			 * 查询日期改变后开始时刻与结束时刻设为默认时刻
			 */
			private function queryDateChange(event:Event):void{
				beginTime.text = "00:00:00";
				endTime.text = "23:59:59";
			}
		]]>
	</fx:Script>
	<s:HGroup  horizontalAlign="center" verticalAlign="middle" width="100%" id="condition">
		<s:VGroup width="100%"  verticalAlign="middle" gap="0" >
			<s:HGroup  width="100%" height="30" verticalAlign="middle" >
				<s:HGroup height="20" paddingLeft="18" id="condition1" verticalAlign="middle">
					<global:HeadendAllAndStateList id="newHead" />
				</s:HGroup>
				<s:HGroup height="30" paddingRight="16" verticalAlign="middle" width="100%" horizontalAlign="right">
					<s:HGroup  id="_Station_Channel" verticalAlign="middle">
						<s:Spacer width="10" />
						<s:Label  text="  " />
						<s:HGroup id="_Code_Freq" paddingLeft="18" verticalAlign="middle">
							<s:Label  text="  频率" />
							<s:TextInput id="_Freq" width="80" change="freqChanged()" maxChars="6" restrict="0-9\."/>
							<s:Label id="_FreqType" text="(kHz)"/>
						</s:HGroup>
					</s:HGroup>
					<s:Spacer width="100%" />
					<s:Button buttonMode="true" label="查询" id="_start" click="start();"/>
				</s:HGroup>
			</s:HGroup>
			
			<!--mx:HRule strokeColor="#666666" shadowColor="#ffffff" width="100%"/-->
			<s:HGroup id="detial" width="100%" height="30" verticalAlign="middle" paddingLeft="18">
				<s:Label  text="上报间隔" />
				<s:TextInput width="40" id="_reportTime" text="1" maxChars="6" restrict="0-9"/>
				<s:Label  text="秒  过期时间"/>
				<s:TextInput   width="50" id="_outTime" text="10" maxChars="6" restrict="0-9\."/>
				<s:Label  text="分钟"/>
				<s:CheckBox id="_zbLevelV8" click="dealCheckBox(event)"/>
				<s:Label text="载波电平"/>
				<s:TextInput width="40" id="_zbLevelV8Data" text="1" maxChars="2" restrict="0-9"/>
				<s:Label text="次/秒" width="60"/>
				
				<s:HGroup id="_BandWidthSpan" gap="2"  verticalAlign="middle">
					<s:CheckBox id="_BandWidth" click="dealCheckBox(event)"/>
					<s:Label text="带宽"/>
					<s:TextInput width="40" id="_BandWidthData" text="1" maxChars="2" restrict="0-9"/>
					<s:Label text="次/秒" width="30"/>
				</s:HGroup>
				
				<s:HGroup id="_configTabS2" gap="2" horizontalAlign="left"  verticalAlign="middle">
					<!--s:HGroup id="_configFM_ModulationV8" width="240" verticalAlign="middle">
						<s:CheckBox id="_tzdqpdclz" click="dealCheckBox(event)"/>
						<s:Label text="调制度全频段测量值"/>
						<s:TextInput width="40" id="_tzdqpdclzData" text="1" maxChars="2" restrict="0-9"/>
						<s:Label text="次/秒" width="30"/>
					</s:HGroup-->
					<s:CheckBox id="_tzdzdzV8" click="dealCheckBox(event)"/>
					<s:Label text="调制度最大值"/>
					<s:TextInput width="40" id="_tzdzdzV8Data" text="1" maxChars="2" restrict="0-9"/>
					<s:Label text="次/秒" width="30"/>
				</s:HGroup>
				
				<s:HGroup id="_configTabS1" gap="2" horizontalAlign="left" verticalAlign="middle">
					<s:CheckBox id="_tfdV8" click="dealCheckBox(event)"/>
					<s:Label text="调幅度"/>
					<s:TextInput width="40" id="_tfdV8Data" text="1" maxChars="2" restrict="0-9"/>
					<s:Label text="次/秒" width="30"/>
					
					
					<s:CheckBox id="_ppV8" click="dealCheckBox(event)"/>
					<s:Label text="频偏"/>
					<s:TextInput width="40" id="_ppV8Data" text="1" maxChars="2" restrict="0-9"/>
					<s:Label text="次/秒" width="30"/>
				</s:HGroup>
				
			</s:HGroup>
			<!--mx:HRule strokeColor="#666666" shadowColor="#ffffff" width="100%"/-->
			<s:HGroup paddingLeft="18" verticalAlign="middle">
				<s:Label text="日期："/>
				<timecomp:TimeNew id="queryDate" dateDisplay="date"/>
				<s:Label text="开始时刻："/>
				<timecomp:TimeNew id="beginTime" dateDisplay="time"/>
				<s:Label text="结束时刻："/>
				<timecomp:TimeNew id="endTime" dateDisplay="time"/>
			</s:HGroup>
				
		</s:VGroup>
	</s:HGroup>
	<s:HGroup id="_chartSpan1"  width="100%" height="100%" gap="0">
		
	</s:HGroup>
	
	<s:HGroup id="_chartSpan2" width="100%" height="100%" gap="1">
		
	</s:HGroup>
	<s:VGroup id="_chartSpanReal" width="100%" height="0" gap="1">
		
	</s:VGroup>
</system:BasePage>
