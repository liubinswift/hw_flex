<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009"
				 xmlns:s="library://ns.adobe.com/flex/spark"
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:system="com.morcha4.frame.system.*"
				 xmlns:contaners="com.morcha4.ui.contaners.*"
				 xmlns:supportClass="com.morcha4.customization.supportClass.*"
				 width="100%"
				 height="100%"
				 xmlns:task="com.viewscenes.module.dailyBusiness.task.*"
				 xmlns:timecomp="com.viewscenes.utils.timecomp.*"
				 creationComplete="init();"
				 xmlns:addTask="com.viewscenes.module.dailyBusiness.task.addTask.*"
				 xmlns:utils="com.viewscenes.utils.*" xmlns:controls="com.viewscenes.utils.tree.CheckTree.controls.*">


	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.frame.system.AdvancedEvent;
			import com.morcha4.frame.system.EventBus;
			import com.morcha4.util.RendererUtil;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.beans.runplan.RunplanBean;
			import com.viewscenes.beans.task.CycleSubTask;
			import com.viewscenes.beans.task.SingleSubTask;
			import com.viewscenes.beans.task.Subtask;
			import com.viewscenes.beans.task.Task;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.EventDeclare;
			import com.viewscenes.global.comp.MM;
			import com.viewscenes.module.dailyBusiness.task.addTask.LoopTime;
			import com.viewscenes.module.dailyBusiness.task.addTask.SingleTime;
			import com.viewscenes.module.dailyBusiness.task.addTask.TaskChannel;
			import com.viewscenes.module.dailyBusiness.task.addTask.TaskHeadend;
			import com.viewscenes.module.dailyBusiness.task.addTask.TaskHeadendSpectrum;
			import com.viewscenes.utils.StringTool;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;

			import mx.core.IVisualElement;
			import mx.events.FlexEvent;

			import spark.events.IndexChangeEvent;
			[Bindable]
			private var allselect:String="false";
			[Bindable]
			public var selectedTab:int=0; //当前选择的是综合任务还是频谱任务。0综合，1：频谱
			[Bindable]
			public var selectedCounts:int=0;
			[Bindable]
			private var headtreeXML:XMLList = new XMLList();
			[Bindable]
			private var reg:RegExp=/^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|[1-9]\d*|0$/;
			[Bindable]
			public var runplanlistdata:ArrayCollection=new ArrayCollection();
			[Bindable]
			public var equColl:ArrayCollection=new ArrayCollection([{label: "自动选择", data: ""}, 
				{label: "R1", data: "R1"}, {label: "R2", data: "R2"},
				{label: "R3", data: "R3"}, {label: "R4", data: "R4"},
				{label: "R5", data: "R5"}, {label: "R6", data: "R6"},
				{label: "R7", data: "R7"}, {label: "R8", data: "R8"},
				{label: "R9", data: "R9"}, {label: "R10", data: "R10"},
				{label: "R11", data: "R11"}, {label: "R12", data: "R12"},
				{label: "R13", data: "R13"}, {label: "R14", data: "R14"},
				{label: "R15", data: "R15"}, {label: "R16", data: "R16"},
				{label: "R17", data: "R17"}, {label: "R18", data: "R18"},
				{label: "R19", data: "R19"}, {label: "R20", data: "R20"},
				{label: "R21", data: "R21"}, {label: "R22", data: "R22"},
				{label: "R23", data: "R23"}, {label: "R24", data: "R24"},
				{label: "R25", data: "R25"}, {label: "R26", data: "R26"},
				{label: "R27", data: "R27"}, {label: "R28", data: "R28"},
				{label: "R29", data: "R29"}, {label: "R30", data: "R30"},
				{label: "R31", data: "R31"}, {label: "R32", data: "R32"}
				
			]);
            [Bindable]
			public var taskTypeColl:ArrayCollection=new ArrayCollection([{label: "临时任务", data: "1"}, {label: "运行图", data: "2"}]);
			[Bindable]
			public var runplanTypeColl:ArrayCollection=new ArrayCollection([{label: "国际台运行图", data: "1"}, {label: "海外落地运行图", data: "2"}]);
			[Bindable]
			public var seasonTypeColl:ArrayCollection=new ArrayCollection([{label: "", data: ""}, {label: "夏季", data: "夏季"}, {label: "冬季", data: "冬季"}]);
			[Bindable]
			public var seasonColl:ArrayCollection=new ArrayCollection();
			[Bindable]
			public var stationTypeColl:ArrayCollection=new ArrayCollection([{label: "全部", data: "all"}, {label: "采集点", data: "101"}, {label: "遥控站", data: "102"}]);

			[Bindable]
			public var timeType:ArrayCollection=new ArrayCollection([{label: "分钟", data: "2"}, {label: "秒钟", data: "1"}, {label: "小时", data: "3"}]);

			[Bindable]
			public var upType:ArrayCollection=new ArrayCollection([{label: "不主动上报结果", data: "2"}, {label: "等待间隔后上报", data: "1"}]);
			[Bindable]
			public var head_code:ArrayCollection=new ArrayCollection();

			
			private var headendReocrdRules:Object=new Object();
			[Bindable]
			private var pinduanArr:ArrayCollection=new ArrayCollection([{label: "6M", data: "6"}, {label: "7M", data: "7"},{label: "9M", data: "9"}, {label: "11M", data: "11"}, {label: "13M", data: "13"}, {label: "15M", data: "15"}, {label: "17M", data: "17"}, {label: "19M", data: "19"}, {label: "21M", data: "21"}, {label: "23M", data: "23"}, {label: "25M", data: "25"}]);
			[Bindable]
			private var tooltipMessage:String="频率范围2300~26100kHz步长：5kHz";
//			//发射台 id station_name
//			[Bindable]
//			private var stationArr:ArrayCollection=new ArrayCollection();
//
//			//语言 language_id language_name
//			[Bindable]
//			private var lanaguageArr:ArrayCollection=new ArrayCollection();

			public function init():void
			{
				bandChang(sband.selectedItem.data);
				mainPan.height=this.height - 50;
				setDefaultValue();
				taskType_change(this.taskType.selectedItem.data)
				getHeadendRecordRules();
				getFuncTreeByRoleId("all");
				addPublicChannel();
//				this.addEventListener("GET_RUNPLAN_BY_HEADS",getRunplanByHeads);
				querySeason();
				EventBus.addEventListener(EventDeclare.ADD_TASK_SPECTRUM,addTaskBySpectrum);
				DataManager.createdModuleObj["/日常业务/任务管理/新增任务"] = true;
			}
			
			/**
			 * 季节代号
			 * */
			private function querySeason():void{
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getSeasonList",null,getSeasonListBack,DataManager.showErrorMessageBack));
			}
			
			private function getSeasonListBack(arr:ArrayCollection):void{
				seasonColl.removeAll();
				var obj:Object = new Object();
				obj.code = "";
				arr.addItemAt(obj,0);
				seasonColl = arr;
				season.selectedIndex = 1;
			}

			/**
			 * 添加任务通过频谱历史数据
			 */
			public function addTaskBySpectrum(event:AdvancedEvent):void{
				var headcode:String = event.data.headcode;
				var freqList:ArrayCollection = event.data.freqList;    
				
				this.taskType.selectedIndex = 0;
				this.stationType.selectedIndex = 0;
				//this.oSelectHeadend.selectedNamesAc.removeAll();
				var head:ResHeadendBean = DataManager.getHeadendByCode(headcode);
				if(head.type_id == "102"){
					head.code = head.code.substr(0,head.code.length-1);
					head.shortname = head.shortname.substr(0,head.shortname.length-1);
					head.shortname_noab = head.shortname;
				}
				
				addTempTaskBySpectrum(freqList);
			}
			private function getHeadendRecordRules():void
			{
				var obj:Object=new Object();
				obj.code="";
				obj.shortname="";
				obj.startRow=1;
				obj.endRow=3000;

				var request:RORequestParam=new RORequestParam("com.viewscenes.web.sysmgr.recordRules.RecordRules", "getRulesend", obj, callBackGetHeadendRecordRules, DataManager.showErrorMessageBack);
				RPCManager.sendCmd(request);


			}

			private function callBackGetHeadendRecordRules(obj:Object):void
			{
				var rule:ArrayCollection=obj.resultList;
				for (var i:int=0; i < rule.length; i++)
				{
					headendReocrdRules[rule[i].head_code]=rule[i];
				}
			}


			/**
			 * 设置默认值
			 */
			private function setDefaultValue():void
			{

				var d:String=DateUtil.date2str(new Date()).substr(0, 10);
				valid_startdatetime.text=(d + ' 00:00:00');

				var dd:Date=new Date();
				dd.fullYear=dd.fullYear + 1;
				var d2:String=DateUtil.date2str(dd).substr(0, 10);
				valid_enddatetime.text=(d2 + ' 00:00:00');

				priority.text='0';

				//loop_reportMode.selectedIndex = 0;
				//timeHBox.includeInLayout=false;
				//timeHBox.visible=false;
				//single_reportMode.selectedIndex = 0;
				//s_timeHBox.includeInLayout=false;
				//s_timeHBox.visible=false;
				level.selected=true;
				am_mod.selected=false;
				fm_mod.selected=false;
				bandwidth.selected=true;



				quality_sleeptime.text='00:30:00'; //指标
				offset_sleeptime.text='00:00:00'; //频偏
//				stream_sleeptime.text = '00:00:00';//录音
//				
//				recordlength.text = '00:01:00';	//录音文件长度

				offset_sample_number.text='5'; //采样个数

				//reportInterval.text = "00:00:10";

				///s_reportInterval.text = "00:00:10";

				//expiredays.text = '2';
//				taskChannel.includeRecordTask = check_stream_task.selected;
			}

			protected function setpClick(state:int):void
			{
				//if (state == 2 && oSelectHeadend.getSelectedHeadend().length == 0)
					//return;
				for (var i:int=1; i <= 2; i++)
				{
					if (state == i)
					{
						(myImage.getElementAt(i - 1) as Image).source="com/viewscenes/images/module/dailyBusiness/task/number/" + i + "_over.png";

					}
					else
					{

						(myImage.getElementAt(i - 1) as Image).source="com/viewscenes/images/module/dailyBusiness/task/number/" + i + ".png";

					}

					if (state == 1)
					{
						this.taskTypeHGroup.enabled=true;
						this.ostep1Group.visible=true;
						this.ostep1Group.includeInLayout=true;
						this.oRunplan.visible=true;
						this.oRunplan.includeInLayout=true;
						this.oCreateTask.visible=false;
						this.oCreateTask.includeInLayout=false;
//						sendHeadname.visible=false;
						this.selHeadContent.visible=this.selHeadContent.includeInLayout=true;
					}
					else if (state == 2)
					{
						this.taskTypeHGroup.enabled=false;
						this.ostep1Group.visible=false;
						this.ostep1Group.includeInLayout=false;
                     
						this.oRunplan.visible=false;
						this.oRunplan.includeInLayout=false;
						this.oCreateTask.visible=true;
						this.oCreateTask.includeInLayout=true;
						this.selHeadContent.visible=this.selHeadContent.includeInLayout=false;
					}
//					else if(state==3)
//					{
//						this.taskType.enabled=true;
//						this.oState.visible=false;
//						this.oState.includeInLayout=false;
//						this.oStaion.visible=false;
//						this.oStaion.includeInLayout=false;	
//						this.oCreateTask.visible=false;
//						this.oCreateTask.includeInLayout=false;
//						this.oRunplan.visible=true;
//						this.oRunplan.includeInLayout=true;
//					}
//					else if(state==4)
//					{
//						this.taskType.enabled=false;
//						this.oState.visible=false;
//						this.oState.includeInLayout=false;
//						this.oStaion.visible=false;
//						this.oStaion.includeInLayout=false;	
//						this.oRunplan.visible=false;
//						this.oRunplan.includeInLayout=false;
//						this.oCreateTask.visible=true;
//						this.oCreateTask.includeInLayout=true;
//					
//					}
				}


			}

			/**
			 * 根据洲取站点
			 * */
//			protected function getStationByStatet(state:String):void
//			{
//				
//				
//				this.oStaion.removeAllElements();
//				var hendends:ArrayCollection=	DataManager.getHeadendByState(state,stationType.selectedItem.data);
//				var titleGroup:TileGroup=new TileGroup();
//				titleGroup.requestedColumnCount=5;
//				titleGroup.verticalGap=10;
//			
//				for(var i:int=0;i<hendends.length;i++)
//				{
//					var headend:ResHeadendBean=(hendends.getItemAt(i) as ResHeadendBean);
//					
//					
//					var hendButton:spark.components.Button=new spark.components.Button();
//					hendButton.styleName="station";
//					hendButton.addEventListener(MouseEvent.CLICK,stationClick);
//					hendButton.width=190;
//					hendButton.height=28;
//					hendButton.label=headend.shortname+"["+headend.code+"]";
//					hendButton.id=headend.code;
//					titleGroup.addElement(hendButton);
//					
//				}
//				oStaion.addElement(titleGroup);
//				
//				this.setpClick(2);
//			}

			private function getRunplanByHeads():void
			{
				runplanlistdata.removeAll();
				
				DataManager.datagridTrip(datagrid_label,true,"正在查询，请稍候...");
				var obj:Object=new Object();
				obj.runplanType = runplanType.selectedItem.data;
				if(runplanType.selectedItem.data=="1"){
					obj.season = season.selectedItem==null?"":season.selectedItem.code;
				}else{
					obj.seasonType=seasonType.selectedItem==null?"":seasonType.selectedItem.data
				}
				var codes:ArrayCollection=new ArrayCollection();

				for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
					var o:Object = new Object;
					o.id = funcTree.checkedItems[i].@id.toString();
				
					if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
					{
						codes.addItem(DataManager.getHeadendById(o.id).code);
					}		
				}
				
				obj.stationCode=codes;
				this.head_code=codes;
				if (codes.length == 0){
					DataManager.datagridTrip(datagrid_label,true,"无查询数据！");
					showRunplanCount.text="不同运行图质量站点总数：0  不同运行图效果站点总数：0  不用运行图全部站点总数：0";
					return;
				}
				obj.freq=queryFreq.text;
				var request:RORequestParam=new RORequestParam("com.viewscenes.web.common.Common", "getRunplanListByHeadCode", obj, callBackRunplanList, DataManager.showErrorMessageBack);
				RPCManager.sendCmd(request);


			}

			private function callBackRunplanList(obj:ArrayCollection):void
			{	
//				Alert.show(obj+"");
				if(obj.length==0){
					DataManager.datagridTrip(datagrid_label,true,"无查询数据！");
				} else{
					DataManager.datagridTrip(datagrid_label,false,"正在查询，请稍候...");
				}
				runplanlistdata=obj;
				var zlCount:int = 0;
				var xgCount:int = 0;
				for(var i:int=0;i<obj.length;i++){
					var rbean:RunplanBean = obj.getItemAt(i) as RunplanBean;
					if(rbean.mon_area != ""){
						zlCount += rbean.mon_area.split(",").length;
					}
					if(rbean.xg_mon_area != ""){
						xgCount += rbean.xg_mon_area.split(",").length;
					}
				}
				this.showRunplanCount.text = "不同运行图质量站点总数："+zlCount+"  不同运行图效果站点总数："+xgCount+"  不用运行图全部站点总数："+(zlCount+xgCount);
//				this.setpClick(3);	
			}

			private var taskHeadObj:Object=new Object();

			/**
			 * 新增运行图任务
			 * createType all生成全部  quality生成质量任务  effect生成效果任务
			 * taskTypeIsTemp  true临时任务 false运行图任务
			 */
			protected function createRunplanTask(createType:String, taskTypeIsTemp:Boolean):void
			{
				var selectHeadend:ArrayCollection=new ArrayCollection();				
				for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
					var o:Object = new Object;
					o.id = funcTree.checkedItems[i].@id.toString();
					if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
					{
						selectHeadend.addItem(DataManager.getHeadendById(o.id));	
					}
					
				}
		
				tabbar.selectedIndex=0;
				vs.selectedIndex=0;
//				generalTask.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
//				private function changeTab(event:IndexChangeEvent):void
				if(taskTypeIsTemp){
					tabbar.enabled = true;
					streamHBox.visible = streamHBox.includeInLayout = true;
					qualityAlarm.visible = qualityAlarm.includeInLayout = true;
				} else{
					tabbar.enabled = false;
					streamHBox.visible = streamHBox.includeInLayout = false;
					qualityAlarm.visible = qualityAlarm.includeInLayout = false;
				}
				// TODO Auto-generated method stub
				this.channelVBox.removeAllElements();
				taskHeadObj=new Object();
				var isTempTask:Boolean=(taskType.selectedItem.label == "临时任务" ? true : false);
				var selectedrunplan:ArrayCollection=new ArrayCollection();
				for (var i:int=0; i < this.runplanlist.dataProvider.length; i++)
				{
					if (this.runplanlist.dataProvider[i].isSelected == "true")
					{
						selectedrunplan.addItem(this.runplanlist.dataProvider[i]);
					}
				}
			
				if (selectedrunplan.length>0)
				{
					this.oCreateTask.visible=true;
					this.setpClick(2);
				}
				else
				{
					DataManager.showErrorMessage("无可用运行图");
				}
			
				for (var i:int=0; i < selectedrunplan.length; i++)
				{
					//轮训所选运行图开始
		
					var runplan:RunplanBean=selectedrunplan.getItemAt(i) as RunplanBean;
				
					if ((createType == "all" || createType == "quality") && runplan.mon_area != "")
					{
						//轮训质量运行图开始
			
						for(var k:int=0;k<selectHeadend.length;k++) 
						{
							var hbean:ResHeadendBean=selectHeadend.getItemAt(k) as ResHeadendBean ;
							if(hbean.code.indexOf(runplan.mon_area)!=-1)
								{
							
									var runplanHead:TaskHeadend=null;
									if (taskHeadObj['taskZL_' + hbean.code] == null)
									{
										runplanHead=new TaskHeadend();
										runplanHead.headcode=hbean.code;
										runplanHead.runplan_id=runplan.runplan_id;
										runplanHead.isRecord=true;
										runplanHead.isTempTask=taskTypeIsTemp;
										runplanHead.id='taskZL_' + hbean.code;
										channelVBox.addElement(runplanHead);
										
										if(taskTypeIsTemp){
											runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "]";
										} else{
											runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "][质量录音]";
										}
										runplanHead.addCHButton.visible=taskTypeIsTemp;
										runplanHead.visableMy();
										runplanHead.record_type="质量";
										taskHeadObj['taskZL_' + hbean.code]=runplanHead;
									}
									else
									{
										runplanHead=taskHeadObj['taskZL_' + hbean.code] as TaskHeadend;
									}
									
									var runplanChannel:TaskChannel=runplanHead.addChannel();
									runplanChannel._freq.text=runplan.freq;
									if (StringTool.getBandFromFreq(runplan.freq) == "2")
									{
										runplanChannel.am_mod.selected=false;
										runplanChannel.fm_mod.selected=true;
									}
									else
									{
										runplanChannel.am_mod.selected=true;
										runplanChannel.fm_mod.selected=false;
									}
									if(!taskTypeIsTemp){
										runplanChannel.validGroupChannel.visible=runplanChannel.validGroupChannel.includeInLayout=true;
										runplanChannel.valid_startdatetime.text = runplan.valid_start_time;
										runplanChannel.valid_enddatetime.text = runplan.valid_end_time;
									}
									runplanChannel.qualityRecordAlarm.selected=!taskTypeIsTemp;
									runplanChannel.recordlength.text=headendReocrdRules[hbean.code] == null ? "00:03:00" : headendReocrdRules[hbean.code].quality_record_length;
									runplanChannel.setBps(headendReocrdRules[hbean.code] == null ? "32000" : headendReocrdRules[hbean.code].quality_bps);
									runplanChannel.stream_sleeptime.text=headendReocrdRules[hbean.code] == null ? "00:00:00" : headendReocrdRules[hbean.code].quality_sleep_time;
									runplanChannel.station.selectedItemValue = ['name',runplan.station_name];
									runplanChannel.language.selectedItemValue = ['language_name',runplan.language_name];
									var looptime:LoopTime=runplanChannel.addChildtoVBox("loop") as LoopTime;
									
									looptime.defaultValue=false;
									looptime._reportInterval.text="00:00:10";
									looptime._startTime.text=runplan.start_time + ":00";
									looptime._endTime.text=runplan.end_time + ":00";
									runplanChannel.visible=true;
									runplanChannel.includeRecordTask=check_stream_task.selected;
								}
						}
					}//轮训质量运行图结束
					if ((createType == "all" || createType == "effect") && runplan.xg_mon_area != "")
					{
						
						//轮训效果运行图开始
						for(var k:int=0;k<selectHeadend.length;k++) 
						{
							var hbean:ResHeadendBean=selectHeadend.getItemAt(k) as ResHeadendBean ;
							if(hbean.code.indexOf(runplan.xg_mon_area)!=-1)
								{
									var runplanHead:TaskHeadend=null;
									if (taskHeadObj['taskXG_' + hbean.code] == null)
									{
										runplanHead=new TaskHeadend();
										runplanHead.headcode=hbean.code;
										runplanHead.runplan_id=runplan.runplan_id;
										runplanHead.isRecord=true;
										runplanHead.isTempTask=taskTypeIsTemp;
										runplanHead.id='taskXG_' + hbean.code;
										
										channelVBox.addElement(runplanHead);
										
										if(taskTypeIsTemp){
											runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "]";
										} else{
											runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "][效果录音]";
										}
										runplanHead.addCHButton.visible=taskTypeIsTemp;
										runplanHead.visableMy();
										runplanHead.record_type="效果";
										taskHeadObj['taskXG_' + hbean.code]=runplanHead;
									}
									else
									{
										runplanHead=taskHeadObj['taskXG_' + hbean.code] as TaskHeadend;
									}
									
									var runplanChannel:TaskChannel=runplanHead.addChannel();
									runplanChannel._freq.text=runplan.freq;
									if (StringTool.getBandFromFreq(runplan.freq) == "2")
									{
										runplanChannel.am_mod.selected=false;
										runplanChannel.fm_mod.selected=true;
									}
									else
									{
										runplanChannel.am_mod.selected=true;
										runplanChannel.fm_mod.selected=false;
									}
									if(!taskTypeIsTemp){
										runplanChannel.validGroupChannel.visible=runplanChannel.validGroupChannel.includeInLayout=true;
										runplanChannel.valid_startdatetime.text =runplan.valid_start_time;
										runplanChannel.valid_enddatetime.text = runplan.valid_end_time;
									}
									runplanChannel.qualityRecordAlarm.selected=false;
									runplanChannel.recordlength.text=headendReocrdRules[hbean.code] == null ? "00:03:00" : headendReocrdRules[hbean.code].effect_record_length;
									runplanChannel.setBps(headendReocrdRules[hbean.code] == null ? "32000" : headendReocrdRules[hbean.code].effect_bps);
									runplanChannel.stream_sleeptime.text=headendReocrdRules[hbean.code] == null ? "00:00:00" : headendReocrdRules[hbean.code].effect_sleep_time;
									runplanChannel.station.selectedItemValue = ['name',runplan.station_name];
									runplanChannel.language.selectedItemValue = ['language_name',runplan.language_name];
									
									var looptime:LoopTime=runplanChannel.addChildtoVBox("loop") as LoopTime;
									
									looptime.defaultValue=false;
									looptime._reportInterval.text="00:00:10";
									looptime._startTime.text=runplan.start_time + ":00";
									looptime._endTime.text=runplan.end_time + ":00";
									runplanChannel.visible=true;
									runplanChannel.includeRecordTask=check_stream_task.selected;
								}
								}
					}//轮训效果运行图结束
					
				}//轮训所选运行图结束
				
			}

			/**
			 *	新增临时任务
			 */
			protected function buttonTemp_click():void
			{
				
				tabbar.enabled = true;
				this.channelVBox.removeAllElements();
				taskHeadObj=new Object();
				var isTempTask:Boolean=(taskType.selectedItem.label == "临时任务" ? true : false);
				var selHeadArr:ArrayCollection=new ArrayCollection();				
				for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
					var o:Object = new Object;
					o.id = funcTree.checkedItems[i].@id.toString();
					if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
					{
						selHeadArr.addItem(DataManager.getHeadendById(o.id));
						
					}
					
				}
				if (selHeadArr.length == 0)
				{
					DataManager.showErrorMessage("请选择站点！");
					return;
				}
				this.head_code.removeAll();
				qualityAlarm.visible = qualityAlarm.includeInLayout = true;
				for (var j:int=0; j < selHeadArr.length; j++)
				{
					
					var hbean:ResHeadendBean=selHeadArr[j];
					this.head_code.addItem(hbean.code);
					var runplanHead:TaskHeadend=new TaskHeadend();
					runplanHead.headcode=hbean.code;
					//
					runplanHead.runplan_id="";
					runplanHead.isRecord=true;
					runplanHead.isTempTask=true;
					runplanHead.id='taskZLTemp_' + hbean.code;
					channelVBox.addElement(runplanHead);
					runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "]";
					runplanHead.addCHButton.visible=true;
//					runplanHead.visableMy();
					
					var runplanChannel:TaskChannel=runplanHead.addChannel();
					
					runplanChannel.recordlength.text=headendReocrdRules[hbean.code] == null ? "00:03:00" : headendReocrdRules[hbean.code].quality_record_length;
					
					runplanChannel.setBps(headendReocrdRules[hbean.code] == null ? "32000" : headendReocrdRules[hbean.code].quality_bps);
					
					runplanChannel.stream_sleeptime.text=headendReocrdRules[hbean.code] == null ? "00:00:00" : headendReocrdRules[hbean.code].quality_sleep_time;
					runplanChannel.isTempTask=true;
					
					runplanChannel.addGroup.visible=runplanChannel.addGroup.includeInLayout=true;
					
					var looptime:LoopTime=runplanChannel.addChildtoVBox("loop") as LoopTime;

					runplanChannel.visible=true;
					runplanChannel.includeRecordTask=check_stream_task.selected;
					runplanChannel.qualityBox.visible = runplanChannel.qualityBox.includeInLayout = check_quality_task.selected;
					runplanChannel.qualityRecordAlarm.visible = runplanChannel.qualityRecordAlarm.includeInLayout = check_quality_task.selected;
					
				}


				this.setpClick(2);

			}

			/**
			 *	从频谱来的数据生成临时任务
			 */
			protected function addTempTaskBySpectrum(freqList:ArrayCollection):void
			{
				this.channelVBox.removeAllElements();
				taskHeadObj=new Object();
				var isTempTask:Boolean=(taskType.selectedItem.label == "临时任务" ? true : false);
				var selHeadArr:ArrayCollection=new ArrayCollection();
				for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
					var o:Object = new Object;
					o.id = funcTree.checkedItems[i].@id.toString();
					if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
					{
						selHeadArr.addItem(DataManager.getHeadendById(o.id));
					}
					
				}
				if (selHeadArr.length == 0)
				{
					DataManager.showErrorMessage("请选择站点！");
				}
				this.head_code.removeAll();
				for (var j:int=0; j < selHeadArr.length; j++)
				{
					var hbean:ResHeadendBean=selHeadArr[j];
					this.head_code.addItem(hbean.code);
					var runplanHead:TaskHeadend=new TaskHeadend();
					runplanHead.headcode=hbean.code;
					runplanHead.runplan_id="";
					runplanHead.isRecord=true;
					runplanHead.isTempTask=true;
					runplanHead.id='taskZLTemp_' + hbean.code;
					channelVBox.addElement(runplanHead);
					runplanHead.showHead.text=hbean.shortname + "[" + hbean.code + "][" + hbean.state_name + "]";
					runplanHead.addCHButton.visible=true;
//						runplanHead.visableMy();
					
					for(var k:int = 0;k<freqList.length;k++){
						var runplanChannel:TaskChannel=runplanHead.addChannel();
						runplanChannel.recordlength.text=headendReocrdRules[hbean.code] == null ? "00:03:00" : headendReocrdRules[hbean.code].quality_record_length;
						runplanChannel.setBps(headendReocrdRules[hbean.code] == null ? "32000" : headendReocrdRules[hbean.code].quality_bps);
						runplanChannel.stream_sleeptime.text=headendReocrdRules[hbean.code] == null ? "00:00:00" : headendReocrdRules[hbean.code].quality_sleep_time;
						runplanChannel.isTempTask=true;
						runplanChannel.addGroup.visible=runplanChannel.addGroup.includeInLayout=true;
						runplanChannel._freq.text = freqList.getItemAt(k).toString();
						
						runplanChannel.addChildtoVBox("stand");
						
						runplanChannel.visible=true;
						runplanChannel.includeRecordTask=check_stream_task.selected;
						runplanChannel.qualityBox.visible = runplanChannel.qualityBox.includeInLayout = check_quality_task.selected;
						runplanChannel.qualityRecordAlarm.visible = runplanChannel.qualityRecordAlarm.includeInLayout = check_quality_task.selected;
					}
				}
				
				
				
				this.setpClick(2);
				
			}
			/**
			 *
			 * 设置要下发的任务类型:指标任务;频偏任务;录音任务
			 */
			private function setTask(e:CheckBox):void
			{
				var checkBoxId:String=e.id;

				if (checkBoxId.indexOf("quality") != -1)
				{
					if (e.selected == true)
					{
						qualityHBox.visible=true;
						qualityHBox.includeInLayout=true;
					}
					else
					{
						qualityHBox.visible=false;
						qualityHBox.includeInLayout=false;
					}

				}
				else if (checkBoxId.indexOf("offset") != -1)
				{

					if (e.selected == true)
					{

						offsetHBox.visible=true;
						offsetHBox.includeInLayout=true;
					}
					else
					{
						offsetHBox.visible=false;
						offsetHBox.includeInLayout=false;
					}

				}
				else if (checkBoxId.indexOf("stream") != -1)
				{

					if (e.selected == true)
					{
						streamHBox.visible=true;
						streamHBox.includeInLayout=true;
						if (publicAddChannel.numElements == 0)
						{
							
							addPublicChannel();
						}

					}
					else
					{
						streamHBox.visible=false;
						streamHBox.includeInLayout=false;
					}
				}
				if (checkBoxId.indexOf("quality") != -1 || checkBoxId.indexOf("stream") != -1)
				{
					for (var i:int=0; i < channelVBox.numElements; i++)
					{
						var tc:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
						tc.setRecord(check_stream_task.selected, check_quality_task.selected);
					}
				}
			}

//			private function addChildtoVBox(type:String):void{
//			
//				if (type == "stand"){
//					var singleObj:SingleTime = new SingleTime();
//					singleObj.task_type = "SpectrumTask";
//					SingleContainer.addElement(singleObj);
//					SingleContainer.includeInLayout = true;
//					SingleContainer.visible = true;
//				}else{
//					var loopObj:LoopTime = new LoopTime();
//					loopObj.task_type = "SpectrumTask";
//					LoopContainer.addElement(loopObj);
//					LoopContainer.includeInLayout = true;
//					LoopContainer.visible = true;
//				}
//				
//			}
			private function sendTask():void
			{
				if (this.head_code.length == 0)
				{
					DataManager.showErrorMessage("请先选择下发任务的站点！");
					return;
				}
				if (!checkAll())
					return;

				var task:ArrayCollection=bulidTask();
				if(task == null || task.length == 0){
					return;
				}

				sendTaskBtn.enabled=false;
				sendTaskBtn.label='任务正在生成中......';
				var request:RORequestParam=new RORequestParam("com.viewscenes.web.task.TaskManager", "AddSyn_Task", task, callBackAddSyn_Task, callBackError,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request);
			}

			private function callBackAddSyn_Task(obj:int):void
			{
				DataManager.showErrorMessage("总共生成了" + obj + "个任务！");
				sendTaskBtn.enabled=true;
				sendTaskBtn.label="生成任务";

				sendSpectrumTaskBtn.enabled=true;
				sendSpectrumTaskBtn.label="生成任务";
			}

			private function callBackError(msg:RPCException):void
			{
				DataManager.showErrorMessage(msg.message);
				sendTaskBtn.enabled=true;
				sendTaskBtn.label="生成任务";
			}

			private function sendSpectrumTask():void
			{
				if (this.head_code.length == 0)
				{
					DataManager.showErrorMessage("请先选择下发任务的站点！");
					return;
				}

				var str:String=checkSubTask();
				if (str != "")
				{
					DataManager.showErrorMessage(str + "该任务没有子任务,无法生成,请添加子任务");
					return;
				}
				//检查所有不能为空的输入框
				if (!checkAllIsNull())
					return;


				if (!checkValidDatetime())
				{
					DataManager.showErrorMessage("有效开始时间不能大于或等于有效结束时间");

					valid_startdatetime.setFocus();
					return;
				}
				str=checkLoopStartEndTime();
				if (str != "")
				{
					DataManager.showErrorMessage(str + "循环时间段中存在开始时间大于或等于结束时间的设置");
					return;
				}
				str=checkSingleStartEndDateTime();
				if (str != "")
				{
					DataManager.showErrorMessage(str + "独立时间段中存在开始时间大于或等于结束时间的设置");
					return;
				}
				//检查波段设置	
				if (!checkBand())
					return;

				var task:ArrayCollection=bulidTask();
				if(task == null || task.length == 0){
					return;
				}
				this.sendSpectrumTaskBtn.enabled=false;
				sendSpectrumTaskBtn.label='任务正在生成中......';

				var request:RORequestParam=new RORequestParam("com.viewscenes.web.task.TaskManager", "AddSyn_Task", task, callBackAddSyn_Task, callBackError,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request);


			}

			//检查所有不能为空的输入框	
			private function checkAllIsNull():Boolean
			{
				var ret:Boolean=true;
				ret=ssample_number.text == "" ? false : true;
				if (!ret)
				{

					DataManager.showErrorMessage("请正确输入采样个数");

					ssample_number.setFocus();
					return ret;
				}



				ret=sstepfreq.text == "" ? false : true;
				if (!ret)
				{
					DataManager.showErrorMessage("请正确输入频率扫描步长");

					sstepfreq.setFocus();
					return ret;
				}
				ret=sstartfreq.text == "" ? false : true;
				if (!ret)
				{
					DataManager.showErrorMessage("请正确输入起始扫描频率");

					sstartfreq.setFocus();
					return ret;
				}
				ret=sendfreq.text == "" ? false : true;
				if (!ret)
				{
					DataManager.showErrorMessage("请正确输入终止扫描频率");

					sendfreq.setFocus();
					return ret;
				}
				return ret;
			}

			private function checkSubTask():String
			{

				for (var i:int=0; i < spectrumPan.numElements; i++)
				{
					var ths:TaskHeadendSpectrum=spectrumPan.getElementAt(i) as TaskHeadendSpectrum;
					if ((ths.SingleContainer.numElements + ths.LoopContainer.numElements) == 0)
					{
						return "站点代码" + ths.headcode;
					}
				}
				return "";
			}

			//1.检查开始结束时间 
			private function checkValidDatetime():Boolean
			{
				var s:String=valid_startdatetime.text;
				var e:String=valid_enddatetime.text;

				return DateUtil.compareDateStr(s, e) == -1 ? true : false;
			}

			//1.检查循环时间段开始、结束时间;2.时间间隔校验
			private function checkLoopStartEndTime():String
			{
				for (var i:int=0; i < spectrumPan.numElements; i++)
				{
					var ths:TaskHeadendSpectrum=spectrumPan.getElementAt(i) as TaskHeadendSpectrum;

					var loop_length:int=ths.LoopContainer.numElements;

//					if (loop_length==0) return "站点代码"+ths.headcode;;

					for (var j:int=0; j < loop_length; j++)
					{
						var loopTime:LoopTime=ths.LoopContainer.getElementAt(j) as LoopTime;
						var s:String=loopTime._startTime.text;
						var e:String=loopTime._endTime.text;

						var retInt:Number=DateUtil.compareDateStr('2000/01/01 ' + s, '2000/01/01 ' + e);

						if (retInt != -1)
						{
							loopTime._startTime.setFocus();
							return "站点代码" + ths.headcode;
							break;
						}
					}

				}
				return "";
			}

			//1.检查独立时间段开始、结束时间;2.时间间隔校验
			private function checkSingleStartEndDateTime():String
			{
				for (var i:int=0; i < spectrumPan.numElements; i++)
				{
					var ths:TaskHeadendSpectrum=spectrumPan.getElementAt(i) as TaskHeadendSpectrum;
					var single_length:int=ths.SingleContainer.numElements;

//					if (single_length==0) 
//						return "站点代码"+ths.headcode;

					var t_mode:String="";
					for (var j:int=0; j < single_length; j++)
					{
						var singleTime:SingleTime=ths.SingleContainer.getElementAt(j) as SingleTime;
						var s:String=singleTime._startDatetime.text;
						var e:String=singleTime._endDatetime.text;

						var retInt:Number=DateUtil.compareDateStr(s, e);

						if (retInt != -1)
						{
							singleTime._startDatetime.setFocus();
							return "站点代码" + ths.headcode;
							break;
						}
					}
				}
				return "";
			}

			/**
			 * 检查波段是否正确
			 * */
			private function checkBand():Boolean
			{
				var _band:String=sband.selectedItem.data;
				var _startfreq:Number=Number(sstartfreq.text);
				var _endfreq:Number=Number(sendfreq.text);
				var _stepfreq:Number=Number(sstepfreq.text);
				if (_band == "0")
				{

					//1.开始大于终止
					if (_startfreq > _endfreq)
					{

						DataManager.showErrorMessage("起始扫描频率不能大于终止扫描频率");

						sendfreq.setFocus();
						return false;

					}

					//2.开始非法
					if (_startfreq < 2300 || _startfreq > 26100)
					{
						DataManager.showErrorMessage("起始扫描频率不能小于2300或大于2610");

						sstartfreq.setFocus();
						return false;
					}

					//3.结束非法
					if (_endfreq < 2300 || _endfreq > 26100)
					{
						DataManager.showErrorMessage("终止扫描频率不能小于2300或大于26100");

						sendfreq.setFocus();
						return false;
					}

					//4.步长非法,大于结束与开始的差
					if (_stepfreq > (_endfreq - _startfreq))
					{

						DataManager.showErrorMessage("步长频率大于起始扫描频率与终止扫描频率之间的差值");

						sstepfreq.setFocus();
						return false;
					}
				}

				if (_band == "1")
				{
					//1.终止大于开始
					if (_startfreq > _endfreq)
					{
						DataManager.showErrorMessage("起始扫描频率不能大于终止扫描频率");
						sendfreq.setFocus();
						return false;

					}

					//2.开始非法
					if (_startfreq < 531 || _startfreq > 1602)
					{
						DataManager.showErrorMessage("起始扫描频率不能小于531或大于1602");
						sstartfreq.setFocus();
						return false;
					}

					//3.结束非法
					if (_endfreq < 531 || _endfreq > 1602)
					{
						DataManager.showErrorMessage("终止扫描频率不能小于531或大于1602");
						sendfreq.setFocus();
						return false;
					}

					//4.步长非法,大于结束与开始的差
					if (_stepfreq > (_endfreq - _startfreq))
					{
						DataManager.showErrorMessage("步长频率大于起始扫描频率与终止扫描频率之间的差值");

						sstepfreq.setFocus();
						return false;
					}
				}

				if (_band == "2")
				{
					//1.终止大于开始
					if (_startfreq > _endfreq)
					{
						DataManager.showErrorMessage("起始扫描频率不能大于终止扫描频率");

						sendfreq.setFocus();
						return false;

					}

					//2.开始非法
//					if (_startfreq<87000 || _startfreq >108000){
//						
//						DataManager.showErrorMessage("起始扫描频率不能小于87000或大于108000" );
//						
//						sstartfreq.setFocus();
//						return false;
//					}
//					
//					//3.结束非法
//					if (_endfreq<87000 || _endfreq >108000){
//						
//						DataManager.showErrorMessage("终止扫描频率不能小于87000或大于1080000" );
//						
//						sendfreq.setFocus();
//						return false;
//					}
//					if (_startfreq < 60000 || _startfreq > 120000)//2013-05-17 海外调频的范围可能在这个之外，所以不做判断
//					{
//
//						DataManager.showErrorMessage("起始扫描频率不能小于60000或大于120000");
//
//						sstartfreq.setFocus();
//						return false;
//					}

//					//3.结束非法
//					if (_endfreq < 60000 || _endfreq > 120000)
//					{
//
//						DataManager.showErrorMessage("终止扫描频率不能小于60000或大于120000");
//
//						sendfreq.setFocus();
//						return false;
//					}

					//4.步长非法,大于结束与开始的差
					if (_stepfreq > (_endfreq - _startfreq))
					{

						DataManager.showErrorMessage("步长频率大于起始扫描频率与终止扫描频率之间的差值");

						sstepfreq.setFocus();
						return false;
					}
				}
				return true;
			}

			private function bulidTask():ArrayCollection
			{
		
				var arrTask:ArrayCollection=new ArrayCollection();

				if (this.selectedTab == 1)
				{

					for (var i:int=0; i < spectrumPan.numElements; i++)
					{
						var task:Task=new Task();
						task.record_type="临时";
						if (this.selectedTab == 1)
						{
							task.task_type="4";
						}
						else if (taskType.selectedItem.data == "2")
						{ //运行图任务
							task.task_type="5";
						}
						else
						{
							//按照录音，频偏，指标的格式传递后台解析 例如：1,1,1
							task.task_type=(check_stream_task.selected == true ? '1' : '0') + "," + (check_offset_task.selected == true ? '1' : '0') + "," + (check_quality_task.selected == true ? '1' : '0');
						}
						task.valid_startdatetime=(this.selectedTab == 0 ? valid_startdatetime.text : this.svalid_startdatetime.text); //有效开始时间	
						task.valid_enddatetime=(this.selectedTab == 0 ? valid_enddatetime.text : this.svalid_enddatetime.text); //有效结束时间
						task.priority=this.selectedTab == 0 ? (priority.text == "" ? '0' : priority.text) : (spriority.text == "" ? '0' : spriority.text); //优先级
						task.unit=this.selectedTab == 0 ? unit.selectedItem.data : this.sunit.selectedItem.data; //采样时间单位
						task.samples_number=this.selectedTab == 0 ? offset_sample_number.text : this.ssample_number.text; //采样个数
						task.is_temporary=this.taskType.selectedItem.data; //运行图任务。
//						task.equ_code=this.sequ_code.selectedItem.data;

						var sub:Subtask=new Subtask();
						sub.band=this.sband.selectedItem.data;
						sub.endfreq=this.sendfreq.text;
						sub.startfreq=sstartfreq.text;
						sub.stepfreq=this.sstepfreq.text;

						var ths:TaskHeadendSpectrum=spectrumPan.getElementAt(i) as TaskHeadendSpectrum;
						task.head_code=ths.headcode;
						task.head_type_id = DataManager.getHeadendByCode(ths.headcode).type_id;
						
						sub.equ_code = ths._equ_code.selectedItem.data;
						task.equ_code = ths._equ_code.selectedItem.data;

						for (var l:int=0; l < ths.LoopContainer.numElements; l++)
						{
							var loop:LoopTime=ths.LoopContainer.getElementAt(l) as LoopTime;
							var cyc:CycleSubTask=new CycleSubTask();

							cyc.dayofweek=loop._dayOfweek.selectedItem.data;

							cyc.endtime=loop._endTime.text;

							cyc.expiredays=loop._cycle_expiredays.text;

							cyc.reportinterval=loop._reportInterval.text;
							cyc.reportmode=loop._reportMode.selectedItem.data;
							cyc.starttime=loop._startTime.text;

							sub.cyctask.addItem(cyc);

						}
						for (var s:int=0; s < ths.SingleContainer.numElements; s++)
						{
							var single:SingleTime=ths.SingleContainer.getElementAt(s) as SingleTime;

							var sin:SingleSubTask=new SingleSubTask();

							sin.enddatetime=single._endDatetime.text;
							sin.expiredays=single._single_expiredays.text;
							sin.reportinterval=single._reportInterval.text;
							sin.reportmode=single._reportMode.selectedItem.data;
							sin.startdatetime=single._startDatetime.text;
							sub.sintask.addItem(sin);
						}

						task.subtask.addItem(sub);


						task.spectrum_sleeptime=this.ssleep_time.text; //录音收测时间间隔

						task.batch_no=DateUtil.date2str(new Date()); //生成任务的时间
						task.note="[" + task.batch_no + "]任务生成";
						task.create_user=DataManager.user.userName;
						arrTask.addItem(task);
					}
				}
				else
				{
					for (var i:int=0; i < this.channelVBox.numElements; i++)
					{
						var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
						if (pinduanRecordBox.selected)
						{ //按频段下发录音任务
							var begin:int=0;
							var end:int=0;
							var setp:int=new Number(record_setp.text);
							if (_pinduanDownList.selectedItem.data == "0")
							{
								begin=2300;
								end=26100;
							}
							else if (_pinduanDownList.selectedItem.data == "1")
							{
								begin=531;
								end=1602;
							}
							else if (_pinduanDownList.selectedItem.data == "2")
							{
								begin=87000;
								end=108000;
							}
							while (begin <= end)
							{
								var task:Task=new Task();
								task.record_type="临时";
								if (this.selectedTab == 1)
								{
									task.task_type="4";
								}
								else if (taskType.selectedItem.data == "2")
								{ //运行图任务
									task.task_type="5";
								}
								else
								{
									//按照录音，频偏，指标的格式传递后台解析 例如：1,1,1
									task.task_type=(check_stream_task.selected == true ? '1' : '0') + "," + (check_offset_task.selected == true ? '1' : '0') + "," + (check_quality_task.selected == true ? '1' : '0');
								}
								task.valid_startdatetime=(this.selectedTab == 0 ? valid_startdatetime.text : this.svalid_startdatetime.text); //有效开始时间	
								task.valid_enddatetime=(this.selectedTab == 0 ? valid_enddatetime.text : this.svalid_enddatetime.text); //有效结束时间
								task.priority=this.selectedTab == 0 ? (priority.text == "" ? '0' : priority.text) : (spriority.text == "" ? '0' : spriority.text); //优先级
								task.unit=this.selectedTab == 0 ? unit.selectedItem.data : this.sunit.selectedItem.data; //采样时间单位
								task.samples_number=this.selectedTab == 0 ? offset_sample_number.text : this.ssample_number.text; //采样个数
								task.is_temporary=this.taskType.selectedItem.data; //运行图任务。
//								task.equ_code=this.sequ_code.selectedItem.data;
								task.equ_code = (publicAddChannel.getElementAt(0) as TaskChannel)._equ_code.selectedItem.data;
								task.head_code=taskHead.headcode;
								task.head_type_id = DataManager.getHeadendByCode(taskHead.headcode).type_id;

								var sub:Subtask=new Subtask();
								sub.band=_pinduanDownList.selectedItem.data;
								sub.freq=begin + "";
								sub.equ_code="";
								sub.from_runplan="";
								sub.bps=(publicAddChannel.getElementAt(0) as TaskChannel)._bps.selectedItem.data;

								var sin:SingleSubTask=new SingleSubTask();

								sin.enddatetime=record_endDatetime.text;
								sin.expiredays=record_single_expiredays.text;
								sin.reportinterval=(publicAddChannel.getElementAt(0) as TaskChannel).stream_sleeptime.text;
								sin.reportmode="1";
								sin.startdatetime=record_startDatetime.text;
								sub.sintask.addItem(sin);

								task.subtask.addItem(sub);

								task.check_level=level.selected == true ? '1' : '0'; //电平
								task.check_am_modulation=am_mod.selected == true ? '1' : '0'; //调幅度
								task.check_fm_modulation=fm_mod.selected == true ? '1' : '0'; //调制度
								task.check_bandwidth=bandwidth.selected == true ? '1' : '0'; //带宽
								task.check_alarm='1'; //上报报警

								task.stream_sleeptime=(publicAddChannel.getElementAt(0) as TaskChannel).stream_sleeptime.text; //录音收测时间间隔
								task.quality_sleeptime=quality_sleeptime.text; //指标收测时间间隔
								task.offset_sleeptime=offset_sleeptime.text; //频偏收测时间间隔
								task.recordlength=(publicAddChannel.getElementAt(0) as TaskChannel).recordlength.text; //录音文件长度
								task.batch_no=DateUtil.date2str(new Date()); //生成任务的时间
								task.note="[" + task.batch_no + "]任务生成";
								task.create_user=DataManager.user.userName;
								arrTask.addItem(task);
								begin+=setp;
							}
							continue;
						}
						else
						{
							for (var aa:int=0; aa < taskHead.content.numElements; aa++)
							{
								
								var channel:TaskChannel=taskHead.content.getElementAt(aa) as TaskChannel;
								var task:Task=new Task();
								task.record_type="临时";
								if (this.selectedTab == 1)
								{
									task.task_type="4";
								}
								else if (taskType.selectedItem.data == "2")
								{ //运行图任务
									task.task_type="5";
									task.valid_startdatetime=channel.valid_startdatetime.text; //有效开始时间	
									task.valid_enddatetime=channel.valid_enddatetime.text; //有效结束时间
								}
								else
								{
									//按照录音，频偏，指标的格式传递后台解析 例如：1,1,1
									task.task_type=(check_stream_task.selected == true ? '1' : '0') + "," + (check_offset_task.selected == true ? '1' : '0') + "," + (check_quality_task.selected == true ? '1' : '0');
									task.valid_startdatetime=(this.selectedTab == 0 ? valid_startdatetime.text : this.svalid_startdatetime.text); //有效开始时间	
									task.valid_enddatetime=(this.selectedTab == 0 ? valid_enddatetime.text : this.svalid_enddatetime.text); //有效结束时间
								}
								task.priority=this.selectedTab == 0 ? (priority.text == "" ? '0' : priority.text) : (spriority.text == "" ? '0' : spriority.text); //优先级
								task.unit=this.selectedTab == 0 ? unit.selectedItem.data : this.sunit.selectedItem.data; //采样时间单位
								task.samples_number=this.selectedTab == 0 ? offset_sample_number.text : this.ssample_number.text; //采样个数
								task.is_temporary=this.taskType.selectedItem.data; //运行图任务。
//								task.equ_code=this.sequ_code.selectedItem.data;
								task.equ_code = channel._equ_code.selectedItem.data;
								task.head_code=taskHead.headcode;
								task.head_type_id = DataManager.getHeadendByCode(taskHead.headcode).type_id;

								var sub:Subtask=new Subtask();
								if(channel._freq.text == ""){
									DataManager.showErrorMessage(task.head_code+"频率不能为空");
									return null;
								}
								sub.band=StringTool.getBandFromFreq(channel._freq.text);
								if(check_offset_task.selected && sub.band == "2"){
									DataManager.showErrorMessage("站点"+task.head_code+"调频频率"+channel._freq.text+"不能做频偏任务");
									return null;
								}
								sub.freq=channel._freq.text;
								if(task.task_type == "5"){
									if( taskHead.showHead.text.indexOf("质量录音")>-1){
//										if(channel._equ_code.selectedItem.data == ""){
//											DataManager.showErrorMessage(taskHead.showHead.text+"质量录音必须指定一个接收机");
//											return new ArrayCollection;
//										}
										task.record_type = "质量";
									} else{
										task.record_type = "效果";
									}
//									if(channel._equ_code.selectedItem.data == "713_R1"){
//										DataManager.showErrorMessage(taskHead.showHead.text+"日常任务不能选择713_R1接收机");
//										return new ArrayCollection;
//									}
								}
								sub.equ_code=channel._equ_code.selectedItem.data;
								sub.from_runplan=channel.runplan_id;
								sub.bps=channel._bps.selectedItem.data;
								sub.station_name=channel.station.selectedItem.name;
								sub.language=channel.language.selectedItem.language_name;
						
								for (var l:int=0; l < channel.LoopContainer.numElements; l++)
								{
									var loop:LoopTime=channel.LoopContainer.getElementAt(l) as LoopTime;
									var cyc:CycleSubTask=new CycleSubTask();

									cyc.dayofweek=loop._dayOfweek.selectedItem.data;

									cyc.endtime=loop._endTime.text;

									cyc.expiredays=loop._cycle_expiredays.text;

									cyc.reportinterval=loop._reportInterval.text;
									cyc.reportmode=loop._reportMode.selectedItem.data;
									cyc.starttime=loop._startTime.text;

									sub.cyctask.addItem(cyc);

								}
								for (var s:int=0; s < channel.SingleContainer.numElements; s++)
								{
									var single:SingleTime=channel.SingleContainer.getElementAt(s) as SingleTime;

									var sin:SingleSubTask=new SingleSubTask();

									sin.enddatetime=single._endDatetime.text;
									sin.expiredays=single._single_expiredays.text;
									sin.reportinterval=single._reportInterval.text;
									sin.reportmode=single._reportMode.selectedItem.data;
									sin.startdatetime=single._startDatetime.text;
									sub.sintask.addItem(sin);
								}

								task.subtask.addItem(sub);

								task.check_level=channel.level.selected == true ? '1' : '0'; //电平
								task.check_am_modulation=channel.am_mod.selected == true ? '1' : '0'; //调幅度
								task.check_fm_modulation=channel.fm_mod.selected == true ? '1' : '0'; //调制度
								task.check_bandwidth=channel.bandwidth.selected == true ? '1' : '0'; //带宽
								task.check_alarm=channel.qualityRecordAlarm.selected == true ? '0' : '1'; //上报报警

								task.stream_sleeptime=channel.stream_sleeptime.text; //录音收测时间间隔
								task.quality_sleeptime=quality_sleeptime.text; //指标收测时间间隔
								task.offset_sleeptime=offset_sleeptime.text; //频偏收测时间间隔
								task.recordlength=channel.recordlength.text; //录音文件长度

								task.batch_no=DateUtil.date2str(new Date()); //生成任务的时间
								task.note="[" + task.batch_no + "]任务生成";
								task.create_user=DataManager.user.userName;
//								task.record_type = taskHead.record_type;
								arrTask.addItem(task);
							}
						}
					}

//					task.check_level=level.selected == true?'1':'0';			//电平
//					task.check_am_modulation =am_mod.selected == true?'1':'0';		//调幅度
//					task.check_fm_modulation=fm_mod.selected == true?'1':'0';		//调制度
//					task.check_bandwidth= bandwidth.selected == true?'1':'0';	//带宽
//					
//			        task.stream_sleeptime = stream_sleeptime.text ;	//录音收测时间间隔
//					task.quality_sleeptime=quality_sleeptime.text;	//指标收测时间间隔
//					task.offset_sleeptime= offset_sleeptime.text ; 	//频偏收测时间间隔
//		            task.recordlength= recordlength.text;			//录音文件长度
//					task.batch_no=DateUtil.date2str(new Date());				//生成任务的时间
//		            task.note="["+task.batch_no+"]任务生成";
//				    task.create_user=DataManager.user.userName;
		}

				return arrTask;
			}



			//检查所有输入框	
			private function checkAll():Boolean
			{
				var ret:Boolean=true;
				ret=offset_sample_number.text == "" ? false : true;
				if (!ret)
				{
					DataManager.showErrorMessage("请正确输入采样个数");
					offset_sample_number.setFocus();
					return ret;
				}
				var s:String=valid_startdatetime.text;
				var e:String=valid_enddatetime.text;

				ret=DateUtil.compareDateStr(s, e) == -1 ? true : false;
				if (!ret)
				{
					DataManager.showErrorMessage("有效开始时间不能大于或等于有效结束时间");
					valid_startdatetime.setFocus();
					return ret;
				}

				//检查采样个数值设置是否正确

				var offSetNum:Number=Number(offset_sample_number.text);
				var _unit:String=unit.selectedItem.data;
				if (offSetNum == 0 || offSetNum > 30 || offSetNum != 1 && (_unit == "1"))
				{
					DataManager.showErrorMessage("选择时间单位为秒时,采样个数只能为1;为分钟或小时时,采样个数必须小于等于30且不能为零");
					return false;
				}
				if (check_quality_task.selected == false && check_offset_task.selected == false && check_stream_task.selected == false)
				{
					DataManager.showErrorMessage("添加任务时必须至少选中一种任务类型");
					return false;
				}
				return true;

				return ret;
			}

			//选择点中后执行的方法

			private function changeSelect(obj:Object):void
			{

				if (obj.data.isSelected == "true")
				{
					this.selectedCounts=selectedCounts + 1;
				}
				else
				{
					this.selectedCounts=selectedCounts - 1;
				}
			}

			protected function taskType_change(taskType:String):void
			{
				if (taskType == "2")
				{ //运行图任务
					addRunplanAllButton.visible=addRunplanAllButton.includeInLayout=true;
					addRunplanQuaButton.visible=addRunplanQuaButton.includeInLayout=true;
					addRunplanEffButton.visible=addRunplanEffButton.includeInLayout=true;
					addTempButton.visible=addTempButton.includeInLayout=false;
					addTempRunplanButton.visible=addTempRunplanButton.includeInLayout=false;
					check_offset_task.selected=false;
					check_offset_task.enabled=false;
					check_quality_task.selected=true;
					check_quality_task.enabled=false;
					check_stream_task.selected=true;
					check_stream_task.enabled=false;
					
					pinduanRecordBox.visible = pinduanRecordBox.includeInLayout = false;
					_pinduanDownList.visible = _pinduanDownList.includeInLayout = false;
					validGroupAll.visible = validGroupAll.includeInLayout = false;
					setTask(check_offset_task);
					setTask(check_quality_task);
					setTask(check_stream_task);
				}
				else
				{
					addRunplanAllButton.visible=addRunplanAllButton.includeInLayout=false;
					addRunplanQuaButton.visible=addRunplanQuaButton.includeInLayout=false;
					addRunplanEffButton.visible=addRunplanEffButton.includeInLayout=false;
					addTempButton.visible=addTempButton.includeInLayout=true;
					addTempRunplanButton.visible=addTempRunplanButton.includeInLayout=true;
					check_offset_task.enabled=true;
					check_quality_task.enabled=true;
					check_stream_task.enabled=true;
					pinduanRecordBox.visible = pinduanRecordBox.includeInLayout = true;
					_pinduanDownList.visible = _pinduanDownList.includeInLayout = true;
					//validGroupAll.visible = validGroupAll.includeInLayout = false;
				}

			}

			private function changeTab(event:IndexChangeEvent):void
			{
				if (taskType.selectedItem.data == "2" && tabbar.selectedIndex  == 1)
				{
					tabbar.selectedIndex=0;
					vs.selectedIndex=0;
					return;
				}

				if (event.target.selectedItem.id == "generalTask")
				{
					oSpectrumTaskTab.visible=false;
					oSpectrumTaskTab.includeInLayout=false;
					oGeneralTaskTab.visible=true;
					oGeneralTaskTab.includeInLayout=true;
					this.selectedTab=0;

				}
				else
				{

					oGeneralTaskTab.visible=false;
					oGeneralTaskTab.includeInLayout=false;
					oSpectrumTaskTab.visible=true;
					oSpectrumTaskTab.includeInLayout=true;
					spectrumPan.removeAllElements();
					var heads:ArrayCollection=new ArrayCollection();
					for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
						var o:Object = new Object;
						o.id = funcTree.checkedItems[i].@id.toString();
						if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
						{
							heads.addItem(DataManager.getHeadendById(o.id));
						}
						
					}
					for (var i:int=0; i < heads.length; i++)
					{
						var item:ResHeadendBean=heads[i] as ResHeadendBean;
						var taskspec:TaskHeadendSpectrum=new TaskHeadendSpectrum();
						taskspec.showHead.text=item.shortname + "[" + item.code + "][" + item.state_name + "]";
						taskspec.headcode=item.code;
						spectrumPan.addElement(taskspec);
						taskspec.addChildtoVBox("loop");
					}

					this.selectedTab=1;

				}
			}

			private function addChannel():void
			{
				var taskChannel2:TaskChannel=new TaskChannel();
				taskChannel2.task_type="GeneralTask";
				taskChannel2.id='taskChannel';
				channelVBox.addElement(taskChannel2);
				taskChannel2.visible=true;
				taskChannel2.includeRecordTask=check_stream_task.selected;
			}

			private function bandChang(b:String):void
			{
				if (b == "0")
				{ //短波
					sstepfreq.text='5';
					sstartfreq.text='2300';
					sendfreq.text='26100';
				}
				else if (b == "1")
				{ //中波
					sstepfreq.text='9';
					sstartfreq.text='531';
					sendfreq.text='1602';
				}
				else if (b == "2")
				{ //调频
					sstepfreq.text='100';
					sstartfreq.text='87000';
					sendfreq.text='108000';
				}
			}

			private function pinduanChang(p:String):void
			{
//				6M  5900-6200
//				7M  7100-7400
//				9M  9400-9900
//				11M 11600-12100
//				13M 13570-13870
//				15M 15100-15800
//				17M 17480-17900
//				19M 18900-19020
//				21M 21450-21850
//				25M 25670-26100
				sband.selectedIndex=0;
				if (p == "6")
				{
					sstepfreq.text='5';
					sstartfreq.text='5900';
					sendfreq.text='6200';
				}
				else if (p == "7")
				{
					sstepfreq.text='5';
					sstartfreq.text='7100';
					sendfreq.text='7400';
				}
				else if (p == "9")
				{
					sstepfreq.text='5';
					sstartfreq.text='9400';
					sendfreq.text='9900';
				}
				else if (p == "11")
				{
					sstepfreq.text='5';
					sstartfreq.text='11600';
					sendfreq.text='12100';
				}
				else if (p == "13")
				{
					sstepfreq.text='5';
					sstartfreq.text='13570';
					sendfreq.text='13870';
				}
				else if (p == "15")
				{
					sstepfreq.text='5';
					sstartfreq.text='15100';
					sendfreq.text='15800';
				}
				else if (p == "17")
				{
					sstepfreq.text='5';
					sstartfreq.text='17480';
					sendfreq.text='17900';
				}
				else if (p == "19")
				{
					sstepfreq.text='5';
					sstartfreq.text='18900';
					sendfreq.text='19020';
				}
				else if (p == "21")
				{
					sstepfreq.text='5';
					sstartfreq.text='21450';
					sendfreq.text='21850';
				}
				else if (p == "25")
				{
					sstepfreq.text='5';
					sstartfreq.text='25670';
					sendfreq.text='26100';
				}
			}

			private function clickChooseAll():void
			{
				if (allselect == "false")
				{
					allselect="true";
				}
				else
				{
					allselect="false";
				}

				for (var i:int=0; i < runplanlistdata.length; i++)
				{
					runplanlistdata.getItemAt(i).isSelected=allselect;
					runplanlistdata.refresh();
					runplanlist.dataProvider=runplanlistdata;
				}


			}

			protected function visableComp(type:int):void
			{
				if (type == 1)
				{
					//oSelectHeadend.visible=oSelectHeadend.includeInLayout=!oSelectHeadend.visible;
				}

			}

			protected function selectQualityParam(box:CheckBox):void
			{
				if(box.id.toString() == "fm_mod" && box.selected){
					am_mod.selected = false;
				}
				if(box.id.toString() == "am_mod" && box.selected){
					fm_mod.selected = false;
				}
				for (var i:int=0; i < channelVBox.numElements; i++)
				{
					var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
					taskHead.setSelectQuality(box.id, box.selected);
				}

			}

//			protected function setSelectRecordlength(e:MouseEvent):void
//			{
//				for(var i:int=0;i<channelVBox.numElements;i++){
//					var taskHead:TaskHeadend = channelVBox.getElementAt(i) as TaskHeadend;
//					if (e.currentTarget.selected == true){
//						taskHead.setSelectRecordlength(stream_sleeptime.text);
//					}
//				}
//			}
//			protected function setSelectStream_sleeptime(e:MouseEvent):void
//			{
//				for(var i:int=0;i<channelVBox.numElements;i++){
//					var taskHead:TaskHeadend = channelVBox.getElementAt(i) as TaskHeadend;
//					if (e.currentTarget.selected == true){
//						taskHead.setSelectStream_sleeptime(recordlength.text);
//					}
//				}
//			}
//			protected function setSelectBps(e:MouseEvent):void
//			{
//				for(var i:int=0;i<channelVBox.numElements;i++){
//					var taskHead:TaskHeadend = channelVBox.getElementAt(i) as TaskHeadend;
//					if (e.currentTarget.selected == true){
//						taskHead.setSelectBps(_bps.selectedItem.data);
//					}
//				}
//			}

			protected function setSelectRecordAll(e:MouseEvent):void
			{
				if (e.currentTarget.selected == true)
				{
					var channel:TaskChannel = this.publicAddChannel.getElementAt(0) as TaskChannel;
					if(this.channelVBox.numElements>0){
						for(var m:int=0;m<this.channelVBox.numElements;m++){
							var taskHead:TaskHeadend=channelVBox.getElementAt(m) as TaskHeadend;
							for(var i:int=0;i<taskHead.content.numElements;i++){
								var channelNew:TaskChannel= taskHead.content.getElementAt(i) as TaskChannel;
								if(channel._freq.text!=""){
									if(channel._freq.text==channelNew._freq.text){
										channelNew._freq.text=channel._freq.text;
										channelNew._equ_code.selectedItemValue=["data",channel._equ_code.selectedItem.data];
										channelNew._bps.selectedItemValue=["data",channel._bps.selectedItem.data];
										channelNew.station.selectedItemValue=["name",channel.station.selectedItem.name];
										channelNew.language.selectedItemValue=["language_name",channel.language.selectedItem.language_name];
										for (var l:int=0; l < channel.LoopContainer.numElements; l++)
										{
											var loop:LoopTime=channel.LoopContainer.getElementAt(l) as LoopTime;
											var loopNew:LoopTime= channelNew.addChildtoVBox("loop") as LoopTime;
											loopNew.defaultValue = false;
											loopNew._dayOfweek.selectedItemValue=["data",loop._dayOfweek.selectedItem.data];
											loopNew._endTime.text=loop._endTime.text;
											loopNew._cycle_expiredays.text=loop._cycle_expiredays.text;
											
											loopNew._reportInterval.text=loop._reportInterval.text;
											loopNew._reportMode.selectedItemValue=["data",loop._reportMode.selectedItem.data];
											loopNew._startTime.text=loop._startTime.text;
											
										}
										for (var s:int=0; s < channel.SingleContainer.numElements; s++)
										{
											var single:SingleTime=channel.SingleContainer.getElementAt(s) as SingleTime;
											var singleNew:SingleTime= channelNew.addChildtoVBox("stand") as SingleTime;
											singleNew.defaultValue = false;
											singleNew._endDatetime.text=single._endDatetime.text;
											singleNew._single_expiredays.text=single._single_expiredays.text;
											singleNew._reportInterval.text=single._reportInterval.text;
											singleNew._reportMode.selectedItemValue=["data",single._reportMode.selectedItem.data];
											singleNew._startDatetime.text=single._startDatetime.text;
										}
										channelNew.stream_sleeptime.text=channel.stream_sleeptime.text; //录音收测时间间隔
										channelNew.recordlength.text=channel.recordlength.text; //录音文件长度
										
									}
									continue;
								}else{
									channelNew._equ_code.selectedItemValue=["data",channel._equ_code.selectedItem.data];
									channelNew._bps.selectedItemValue=["data",channel._bps.selectedItem.data];
									channelNew.station.selectedItemValue=["name",channel.station.selectedItem.name];
									channelNew.language.selectedItemValue=["language_name",channel.language.selectedItem.language_name];
									for (var l:int=0; l < channel.LoopContainer.numElements; l++)
									{
										var loop:LoopTime=channel.LoopContainer.getElementAt(l) as LoopTime;
										var loopNew:LoopTime= channelNew.addChildtoVBox("loop") as LoopTime;
										loopNew.defaultValue = false;
										loopNew._dayOfweek.selectedItemValue=["data",loop._dayOfweek.selectedItem.data];
										loopNew._endTime.text=loop._endTime.text;
										loopNew._cycle_expiredays.text=loop._cycle_expiredays.text;
										
										loopNew._reportInterval.text=loop._reportInterval.text;
										loopNew._reportMode.selectedItemValue=["data",loop._reportMode.selectedItem.data];
										loopNew._startTime.text=loop._startTime.text;
										
									}
									for (var s:int=0; s < channel.SingleContainer.numElements; s++)
									{
										var single:SingleTime=channel.SingleContainer.getElementAt(s) as SingleTime;
										var singleNew:SingleTime= channelNew.addChildtoVBox("stand") as SingleTime;
										singleNew.defaultValue = false;
										singleNew._endDatetime.text=single._endDatetime.text;
										singleNew._single_expiredays.text=single._single_expiredays.text;
										singleNew._reportInterval.text=single._reportInterval.text;
										singleNew._reportMode.selectedItemValue=["data",single._reportMode.selectedItem.data];
										singleNew._startDatetime.text=single._startDatetime.text;
									}
									channelNew.stream_sleeptime.text=channel.stream_sleeptime.text; //录音收测时间间隔
									channelNew.recordlength.text=channel.recordlength.text; //录音文件长度
								}
							}
						}
						
					}
					
				}	
/***王福祥注释掉改为上面的方法	2014/02/28	***/		
//					for (var i:int=0; i < this.channelVBox.numElements; i++)
//					{
//						var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
//						//taskHead.content.removeAllElements();
//						for (var j:int=0; j < this.publicAddChannel.numElements; j++)
//						{
//							var channel:TaskChannel = this.publicAddChannel.getElementAt(j) as TaskChannel;
//							var channelNew:TaskChannel= taskHead.addChannel();
//							taskHead.setRecord(true,false);
//							channelNew._freq.text=channel._freq.text;
//							channelNew._equ_code.selectedItemValue=["data",channel._equ_code.selectedItem.data];
//							channelNew._bps.selectedItemValue=["data",channel._bps.selectedItem.data];
//							channelNew.station.selectedItemValue=["name",channel.station.selectedItem.name];
//							channelNew.language.selectedItemValue=["language_name",channel.language.selectedItem.language_name];
//							for (var l:int=0; l < channel.LoopContainer.numElements; l++)
//							{
//								var loop:LoopTime=channel.LoopContainer.getElementAt(l) as LoopTime;
//								var loopNew:LoopTime= channelNew.addChildtoVBox("loop") as LoopTime;
//								loopNew.defaultValue = false;
//								loopNew._dayOfweek.selectedItemValue=["data",loop._dayOfweek.selectedItem.data];
//								loopNew._endTime.text=loop._endTime.text;
//								loopNew._cycle_expiredays.text=loop._cycle_expiredays.text;
//								
//								loopNew._reportInterval.text=loop._reportInterval.text;
//								loopNew._reportMode.selectedItemValue=["data",loop._reportMode.selectedItem.data];
//								loopNew._startTime.text=loop._startTime.text;
//								
//							}
//							for (var s:int=0; s < channel.SingleContainer.numElements; s++)
//							{
//								var single:SingleTime=channel.SingleContainer.getElementAt(s) as SingleTime;
//								var singleNew:SingleTime= channelNew.addChildtoVBox("stand") as SingleTime;
//								singleNew.defaultValue = false;
//								singleNew._endDatetime.text=single._endDatetime.text;
//								singleNew._single_expiredays.text=single._single_expiredays.text;
//								singleNew._reportInterval.text=single._reportInterval.text;
//								singleNew._reportMode.selectedItemValue=["data",single._reportMode.selectedItem.data];
//								singleNew._startDatetime.text=single._startDatetime.text;
//							}
////							
////							task.subtask.addItem(sub);
//							
//							
//							channelNew.stream_sleeptime.text=channel.stream_sleeptime.text; //录音收测时间间隔
//							channelNew.recordlength.text=channel.recordlength.text; //录音文件长度
//							
//							
////							taskHead.addElement(StringTool.clone(this.publicAddChannel.getElementAt(j)));
//						}
//					}
	//			} 
//				else{
//					for (var i:int=0; i < this.channelVBox.numElements; i++)
//					{
//						var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
//						taskHead.content.removeAllElements();
//					}
//				}
			}

			protected function pinduanRecord(e:MouseEvent):void
			{
				if (e.currentTarget.selected == true)
				{
					check_offset_task.selected=false;
					check_offset_task.enabled=false;
					check_quality_task.selected=false;
					check_quality_task.enabled=false;
					check_stream_task.selected=true;
					check_stream_task.enabled=false;
					setTask(check_offset_task);
					setTask(check_quality_task);
					setTask(check_stream_task);

//					Stream_sleeptimeBox.selected = true;
//					Stream_sleeptimeBox.enabled = false;
					recordLengthBox.selected=true;
					recordLengthBox.enabled=false;
//					recordBpsBox.selected = true;
//					recordBpsBox.enabled = false;
					addCHButton.visible=addCHButton.includeInLayout=false;
					this.publicAddChannel.removeAllElements();
					for (var i:int=0; i < this.channelVBox.numElements; i++)
					{
						var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
						taskHead.content.removeAllElements();
						taskHead.addCHButton.visible=false;
					}

					record_startDatetime.text=(DateUtil.date2str(new Date()));
					//开始与结束间隔10分钟				
					var d:Date=new Date();
					d.minutes=d.minutes + 10;
					//结束时间
					record_endDatetime.text=(DateUtil.date2str(d));
					//有效天数
					record_single_expiredays.text='30';
					recordOtherParam.visible=true;
				}
				else
				{
					check_offset_task.enabled=true;
					check_quality_task.enabled=true;
					check_stream_task.enabled=true;

//					Stream_sleeptimeBox.enabled = true;
					recordLengthBox.enabled=true;
//					recordBpsBox.enabled = true;
					recordOtherParam.visible=false;
					addCHButton.visible=addCHButton.includeInLayout=true;
					addPublicChannel();
					for (var i:int=0; i < this.channelVBox.numElements; i++)
					{
						var taskHead:TaskHeadend=channelVBox.getElementAt(i) as TaskHeadend;
						taskHead.addCHButton.visible=true;
					}
				}
			}

			protected function selectPinduanSpectrum(event:MouseEvent):void
			{
				if (selectPinduanBox.selected)
				{
					spinduan.enabled=true;
					pinduanChang(spinduan.selectedItem.data);
				}
				else
				{
					spinduan.enabled=false;
				}
			}

			protected function _pinduanDownList_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				if (_pinduanDownList.selectedItem.data == "0")
				{ //短波
					tooltipMessage="频率范围2300~26100kHz步长：5kHz";
					record_setp.text="5";
				}
				else if (_pinduanDownList.selectedItem.data == "1")
				{ //中波
					tooltipMessage="频率范围531~1602kHz步长：9kHz";
					record_setp.text="9";
				}
				else if (_pinduanDownList.selectedItem.data == "2")
				{ //调频
					tooltipMessage="频率范围87000~108000kHz步长：100kHz";
					record_setp.text="100";
				}
			}

			protected function stationType_changeHandler(data:String):void
			{
				
				if(data=="all")
				{
					getFuncTreeByRoleId("all");
				}else if(data=="101")
				{
					getFuncTreeByRoleId("101");
				}else if(data=="102")
				{
					getFuncTreeByRoleId("102");
				}
				// TODO Auto-generated method stub
				//this.oSelectHeadend.headend_type=stationType.selectedItem.data;
				//this.oSelectHeadend.getHeadList();
			}

			public function addPublicChannel():TaskChannel
			{
				var runplanChannel:TaskChannel=new TaskChannel();
				publicAddChannel.addElementAt(runplanChannel,publicAddChannel.numElements);
				runplanChannel.task_type="loop";
				//				runplanChannel.id = 'taskZL_'+headcode;
				runplanChannel.runplan_id="";
				runplanChannel.isTempTask=true;
				//				mx.controls.Alert.show(isTempTask+"");
				runplanChannel.addGroup.visible=runplanChannel.addGroup.includeInLayout=true;
				runplanChannel.myParent=this;
				runplanChannel.qualityBox.visible=runplanChannel.qualityBox.includeInLayout=false;
				
				runplanChannel.addChildtoVBox("stand");
//				runplanChannel.equColl.addItem({label:"R1", data:"R1"});
//				runplanChannel.equColl.addItem({label:"R2", data:"R2"});
//				runplanChannel.equColl.addItem({label:"R3", data:"R3"});
				runplanChannel._equ_code.dataProvider = runplanChannel.equColl;
//				publicAddChannel.removeAllElements();
				return runplanChannel;
			}

			/**
			 *
			 */
			public function removeTaskChild(evement:IVisualElement):void
			{
				publicAddChannel.removeElement(evement);
			}
			
			
			protected function tabbar_valueCommitHandler(event:FlexEvent):void
			{
				if (taskType.selectedItem.data == "2" && tabbar.selectedIndex  == 1)
				{
					tabbar.selectedIndex=0;
					vs.selectedIndex=0;
					return;
				}
				
				if (event.target.selectedItem.id == "generalTask")
				{
					oSpectrumTaskTab.visible=false;
					oSpectrumTaskTab.includeInLayout=false;
					oGeneralTaskTab.visible=true;
					oGeneralTaskTab.includeInLayout=true;
					this.selectedTab=0;
					
				}
				else
				{
					
					oGeneralTaskTab.visible=false;
					oGeneralTaskTab.includeInLayout=false;
					oSpectrumTaskTab.visible=true;
					oSpectrumTaskTab.includeInLayout=true;
					spectrumPan.removeAllElements();
					var heads:ArrayCollection=new ArrayCollection();
					for(var i:int=0 ; i<funcTree.checkedItems.length; i++){
						var o:Object = new Object;
						o.id = funcTree.checkedItems[i].@id.toString();
						if(o.id!="0"&&o.id!="1"&&o.id!="2"&&o.id!="3"&&o.id!="4"&&o.id!="5"&&o.id!="6")
						{
							heads.addItem(DataManager.getHeadendById(o.id));
						}
						
					}
					
					for (var i:int=0; i < heads.length; i++)
					{
						var item:ResHeadendBean=heads[i] as ResHeadendBean;
						var taskspec:TaskHeadendSpectrum=new TaskHeadendSpectrum();
						taskspec.showHead.text=item.shortname + "[" + item.code + "][" + item.state_name + "]";
						taskspec.headcode=item.code;
					
						taskspec._equ_code.dataProvider = DataManager.taskHeadenEqu;
						
						spectrumPan.addElement(taskspec);
						taskspec.addChildtoVBox("loop");
					}
					
					this.selectedTab=1;
					
				}
			}
			public function getFuncTreeByRoleId(str:String):void{
				var asObj:Object = new Object;
				asObj.type=str;
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.common.Common","getHeadendTree",asObj,_getFuncTreeByRoleId,_getFuncTreeByRoleId));
			}
			
			private function _getFuncTreeByRoleId(arr:ArrayCollection):void{
				
				
				var retXml:XML = new XML(arr[0]);
				
				//Alert.show(retXml.toXMLString());
				for each(var x:XML in retXml.tree){
					headtreeXML =x.node;
				}
				this.funcTree.initChecked(null);
			}
			
			private function runplanType_changeHandler(runplanType:String):void{
				if(runplanType==="1"){
					seasonLabel.visible=true;
					seasonLabel.includeInLayout=true;
					season.visible=true;
					season.includeInLayout=true;
					seasonTypeLabel.visible=false;
					seasonTypeLabel.includeInLayout=false;
					seasonType.visible=false;
					seasonType.includeInLayout=false;
				}else{
					seasonLabel.visible=false;
					seasonLabel.includeInLayout=false;
					season.visible=false;
					season.includeInLayout=false;
					seasonTypeLabel.visible=true;
					seasonTypeLabel.includeInLayout=true;
					seasonType.visible=true;
					seasonType.includeInLayout=true;
				}
			}
		]]>
	</fx:Script>

	<s:VGroup width="100%"
			  gap="10">
		<s:Group width="100%">
			<s:HGroup horizontalAlign="center"
					  width="100%"
					  id="myImage"
					  paddingTop="10">
				<s:Image height="22"
						 width="21"
						 id="step1"
						 click="setpClick(1)"
						 useHandCursor="true"
						 buttonMode="true"
						 source="com/viewscenes/images/module/dailyBusiness/task/number/1_over.png"/>
				<s:Image height="22"
						 width="21"
						 id="step2"
						 click="setpClick(2)"
						 useHandCursor="true"
						 buttonMode="true"
						 source="com/viewscenes/images/module/dailyBusiness/task/number/2.png"/>
				<!--s:Image height="22" width="21" id="step3" click="setpClick(3)" useHandCursor="true"   buttonMode="true"  source="com/viewscenes/images/module/dailyBusiness/task/number/3.png"/>
				<s:Image height="22" width="21" id="step4" click="setpClick(4)" useHandCursor="true"  buttonMode="true"   source="com/viewscenes/images/module/dailyBusiness/task/number/4.png"/-->
			</s:HGroup>
			<s:HGroup paddingLeft="50"
					  paddingTop="10"
					  width="100%"
					  verticalAlign="middle"
					  id="taskTypeHGroup">
				<s:Label text="任务类型："/>
				<s:DropDownList id="taskType"
								dataProvider="{taskTypeColl}"
								selectedIndex="0"
								change="taskType_change(this.taskType.selectedItem.data)">
				</s:DropDownList>
				
				<s:Label text="站点类型："/>
				<s:DropDownList id="stationType"
								dataProvider="{stationTypeColl}"
								change="stationType_changeHandler(this.stationType.selectedItem.data)"
								selectedIndex="0">
				</s:DropDownList>
				<!--s:Label  id="sendHeadname" text="所选下发任务站点："  fontSize="14"  color="#ff0000" visible="false"/-->
			</s:HGroup>
		</s:Group>
		<contaners:SimpleContainer width="100%"
								   height="100%"
								   id="mainPan">
			<contaners:layout>
				<s:VerticalLayout verticalAlign="top"
								  paddingTop="20"
								  gap="0"/>
			</contaners:layout>
			<s:Group width="100%"
					 click="visableComp(1)"
					 id="selHeadContent">
				<s:Image source="com/viewscenes/images/module/parameterSet/title_bg.png"
						 left="5"
						 right="5"
						 fillMode="scale"
						 scaleMode="stretch"
						 height="25"
						 width="100%"/>
				<s:Label text="任务设置"
						 paddingTop="5"
						 paddingLeft="10"
						 fontSize="16"
						 fontFamily="微软雅黑"/>

			</s:Group>
			
<s:HGroup  id="ostep1Group" width="100%"  height="100%">
	

		
			<controls:TreeCheckBox width="15%"  height="100%"  contentBackgroundAlpha="0.2"  
								   id="funcTree"	   
								   showRoot="false"
								   styleName="systemManagerTree" 
							
								   checkField="@checked" 
								   labelField="@text" 
								   dataProvider="{headtreeXML}"
								   disclosureOpenIcon="@Embed(source='com/viewscenes/images/module/systemManager/user/-.png')"
								   disclosureClosedIcon="@Embed(source='com/viewscenes/images/module/systemManager/user/+.png')">
				
			</controls:TreeCheckBox>

			<!--addTask:SelectStation id="oSelectHeadend"
								   width="100%"
								   height="160"
								   headend_type="{stationType.selectedItem.data}"
								   verticalAlign="middle"
								   horizontalAlign="center"
								   paddingTop="20"/-->
			<!--s:HGroup  id="oState" top="380" paddingTop="30"      width="100%"   verticalAlign="middle" horizontalAlign="center"  >

				<s:Button buttonMode="true" label="亚洲"   styleName="state"  click="getStationByStatet('0')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="欧洲" styleName="state" click="getStationByStatet('1')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="非洲" styleName="state" click="getStationByStatet('2')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="北美洲" styleName="state"  click="getStationByStatet('3')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="南美洲"  styleName="state"  click="getStationByStatet('4')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="大洋洲" styleName="state"  click="getStationByStatet('5')"  width="104" height="28"/>
				<s:Spacer width="10"></s:Spacer>
				<s:Button buttonMode="true" label="南极洲"  styleName="state" click="getStationByStatet('6')"  width="104" height="28"/>
			</s:HGroup>
			<s:HGroup   gap="20" paddingTop="30"    visible="false"  includeInLayout="false"  id="oStaion"  top="380" verticalAlign="middle" horizontalAlign="center" width="100%"  >

			</s:HGroup-->
			<s:VGroup gap="10"
					  paddingTop="30"
					  id="oRunplan"
					  top="560"
					  verticalAlign="middle"
					  horizontalAlign="center"
					  width="85%">
				<s:HGroup horizontalAlign="center"
						  width="100%"
						  gap="30"
						  verticalAlign="middle">
					<s:DropDownList id="runplanType"
									dataProvider="{runplanTypeColl}"
									change="runplanType_changeHandler(this.runplanType.selectedItem.data)"
									selectedIndex="0"/>
					<s:Label id="seasonLabel" text="季节代号"/>
					<s:DropDownList id="season" dataProvider="{seasonColl}" labelField="code" />
					<s:Label id="seasonTypeLabel" text="季节类型" visible="false" includeInLayout="false"/>
					<s:DropDownList id="seasonType" dataProvider="{seasonTypeColl}" visible="false" includeInLayout="false"/>
					<s:Label text="频率"/>
					<utils:RegExpTextInput id="queryFreq"
										   regex="{reg}"
										   width="80"
										   maxChars="6"/>
					<s:Button buttonMode="true" label="查询运行图"
							  click="getRunplanByHeads()"/>
					<s:Button buttonMode="true" label="全选"
							  click="clickChooseAll()"/>
					<s:Button buttonMode="true" label="所选运行图生成任务"
							  click="createRunplanTask('all',false)"
							  id="addRunplanAllButton"/>
					<s:Button buttonMode="true" label="所选运行图生成质量任务"
							  click="createRunplanTask('quality',false)"
							  id="addRunplanQuaButton"/>
					<s:Button buttonMode="true" label="所选运行图生成效果任务"
							  click="createRunplanTask('effect',false)"
							  id="addRunplanEffButton"/>
					<s:Button buttonMode="true" label="所选运行图生成临时任务"
							  click="createRunplanTask('all',true)"
							  id="addTempRunplanButton"/>
					<s:Button buttonMode="true" label="生成临时任务"
							  click="buttonTemp_click()"
							  id="addTempButton"/>
				</s:HGroup>
				<s:Group width="100%" height="100%">
					

					<s:DataGrid id="runplanlist"
								textAlign="center"
								width="100%"
								height="100%"
								dataProvider="{runplanlistdata}"
								showDataTips="true">
						<s:columns>
							<s:ArrayCollection>
								<s:GridColumn headerText="选择"
											  editable="false"
											  itemRenderer="{RendererUtil.getCheckBoxRenderer(changeSelect)}"/>
								<s:GridColumn dataField="mon_area"
											  headerText="质量站点代码"/>
								<s:GridColumn dataField="xg_mon_area"
											  headerText="效果站点代码"/>
								<s:GridColumn dataField="station_name"
											  headerText="台名"/>
								<s:GridColumn dataField="redisseminators"
											  headerText="转播机构"/>
								<s:GridColumn dataField="freq"
											  headerText="频率"/>
								<!--s:GridColumn dataField="transmiter_no"
											  headerText="机号"/>
								<s:GridColumn dataField="antenna"
											  headerText="天线号"/>
								<s:GridColumn dataField="direction"
											  headerText="方向"/>
								<s:GridColumn dataField="power"
											  headerText="功率"/-->
								<!--s:GridColumn  dataField="program_name" headerText="节目" /-->
								<s:GridColumn dataField="language_name"
											  headerText="语言"/>
								<s:GridColumn dataField="start_time"
											  headerText="开始时间"/>
								<s:GridColumn dataField="end_time"
											  headerText="结束时间"/>
								<s:GridColumn dataField="sendcity"
											  headerText="发射国家"/>
								<s:GridColumn dataField="runplanType"
											  headerText="运行图类型"/>
							</s:ArrayCollection>
						</s:columns>
					</s:DataGrid>
					<s:Label text="正在查询，请稍候..."   fontSize="12" textAlign="center" color="0x000000" id="datagrid_label" y="40" width="100%" visible="false" includeInLayout="false" />				
					
				</s:Group>
				<s:Label id="showRunplanCount" text="不同运行图质量站点总数：0  不同运行图效果站点总数：0  不用运行图全部站点总数：0"/>
			</s:VGroup>
</s:HGroup>
			<s:VGroup id="oCreateTask"
					  visible="false"
					  includeInLayout="false"
					  width="100%">
				<s:HGroup id="tempChannel"
						  visible="true"
						  includeInLayout="true"
						  paddingLeft="10">

					<s:TabBar dataProvider="{vs}" valueCommit="tabbar_valueCommitHandler(event)"
							  change="changeTab(event)"
							  id="tabbar"/>
					<mx:ViewStack id="vs"
								  width="100%"
								  creationPolicy="all">
						<s:NavigatorContent id="generalTask"
											label="综合任务管理">
						</s:NavigatorContent>
						<s:NavigatorContent id="spectrumTask"
											label="频谱任务管理">
						</s:NavigatorContent>
					</mx:ViewStack>
				</s:HGroup>
				<s:VGroup id="oSpectrumTaskTab"
						  width="100%"
						  visible="false"
						  includeInLayout="false">

					<s:VGroup width="100%">
						<s:VGroup width="100%">
							<s:HGroup width="100%"
									  height="40"
									  verticalAlign="middle">
								<s:Spacer width="16"/>
								<s:Label text="有效期 从:"/>

								<timecomp:TimeNew id="svalid_startdatetime"/>
								<s:Label text="到"/>

								<timecomp:TimeNew id="svalid_enddatetime"/>
								<s:Spacer width="10"/>
								<s:Label text="优先级:"/>
								<s:TextInput maxChars="1"
											 restrict="0-9"
											 width="20"
											 id="spriority"
											 text="1"/>
								<s:Label id="yxj"
										 text="(0~9级)"/>
								<s:Spacer width="15"/>
								<s:Label text="每"/>
								<s:DropDownList id="sunit"
												dataProvider="{timeType}"
												selectedIndex="1">

								</s:DropDownList>
								<s:Spacer width="15"/>
								<s:Label text="采样个数:"/>
								<s:TextInput restrict="0-9"
											 width="35"
											 id="ssample_number"
											 text="1"/>

								<s:Spacer width="10"/>
								<s:Label text="接收机:" visible="false"/>
								<s:DropDownList id="sequ_code" visible="false"
												dataProvider="{equColl}"
												selectedIndex="0"/>

							</s:HGroup>
							<mx:HRule strokeWidth="1"
									  strokeColor="#a0a0a0"
									  shadowColor="#000000"
									  width="100%"/>
						</s:VGroup>
						<s:VGroup width="100%">
							<s:HGroup width="100%"
									  height="40"
									  verticalAlign="middle">
								<s:Spacer width="16"/>
								<s:Label text="收测时间间隔(秒):"/>
								<timecomp:TimeNew id="ssleep_time"
												  dateDisplay="time"
												  text="00:00:10"/>
								<s:Spacer width="10"/>
								<s:Label text="频段扫描:"/>
								<s:CheckBox label="频段选择"
											click="selectPinduanSpectrum(event)"
											id="selectPinduanBox"/>
								<s:DropDownList id="spinduan"
												change="pinduanChang(spinduan.selectedItem.data);"
												dataProvider="{pinduanArr}"
												selectedIndex="0"
												enabled="false"/>

								<s:DropDownList id="sband"
												change="bandChang(sband.selectedItem.data);"
												dataProvider="{DataManager.bandColl}"
												selectedIndex="1"/>

								<s:Spacer width="10"/>
								<s:Label text="步长频率:"/>
								<s:TextInput restrict="0-9"
											 width="40"
											 id="sstepfreq"/>
								<s:Label text="KHz"/>
								<s:Spacer width="10"/>
								<s:Label text="起始扫描频率:"/>
								<s:TextInput restrict="0-9"
											 width="90"
											 id="sstartfreq"/>
								<s:Label text="KHz"/>
								<s:Spacer width="26"/>
								<s:Label text="终止扫描频率:"/>
								<s:TextInput restrict="0-9"
											 width="90"
											 id="sendfreq"/>
								<s:Label text="KHz"/>
								<s:Spacer width="15"/>

							</s:HGroup>
							<mx:HRule strokeWidth="1"
									  strokeColor="#a0a0a0"
									  shadowColor="#000000"
									  width="100%"/>
						</s:VGroup>
						<s:Spacer height="10"/>
						<s:VGroup width="100%"
								  horizontalAlign="center"
								  verticalAlign="middle"
								  id="spectrumPan">

						</s:VGroup>

						<s:HGroup width="100%"
								  horizontalAlign="center"
								  verticalAlign="middle">
							<s:Button buttonMode="true" label="生成任务"
									  id="sendSpectrumTaskBtn"
									  click="sendSpectrumTask();"/>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
				<s:VGroup width="100%"
						  id="oGeneralTaskTab" paddingLeft="10">

					<s:VGroup width="100%">
						<s:HGroup width="100%"
								  verticalAlign="middle"
								  horizontalAlign="left"
								  gap="5">
							<s:CheckBox id="check_quality_task"
										label="指标任务"
										selected="true"
										click="setTask(check_quality_task);"/>
							<s:Spacer width="10"/>
							<s:CheckBox id="check_offset_task"
										label="频偏任务"
										selected="true"
										click="setTask(check_offset_task);"/>
							<s:Spacer width="10"/>
							<s:CheckBox id="check_stream_task"
										label="录音任务"
										selected="true"
										click="setTask(check_stream_task);"/>

							<s:CheckBox click="pinduanRecord(event)"
										toolTip="频段下发录音任务"
										id="pinduanRecordBox"/>
							<s:DropDownList id="_pinduanDownList"
											dataProvider="{DataManager.bandColl}"
											change="_pinduanDownList_changeHandler(event)"
											selectedIndex="0"
											width="65"
											toolTip="{tooltipMessage}"/>

							<s:Spacer width="16"/>
							<s:HGroup verticalAlign="middle" id="validGroupAll">
								<s:Label text="有效期从："/>
								<!--timecomp:mydata id="valid_startdatetime"/-->
								<timecomp:TimeNew id="valid_startdatetime"/>
								<s:Label text="到"/>
								<!--timecomp:mydata id="valid_enddatetime"/-->
								<timecomp:TimeNew id="valid_enddatetime"/>
								<s:Spacer width="10"/>
							</s:HGroup>
							<s:Label text="优先级："/>
							<s:TextInput width="20"
										 id="priority"
										 restrict="0-9"
										 maxChars="1"/>
							<s:Label text="(0~9级)"/>
							<s:Spacer width="10"/>
							<s:Label text="每："/>
							<s:DropDownList width="70"
											id="unit"
											dataProvider="{timeType}"
											selectedIndex="0"/>
							<s:Spacer width="10"/>
							<s:Label text="采样个数："/>

							<s:TextInput id="offset_sample_number"
										 width="35"
										 text="5"
										 restrict="0-9"
										 maxChars="2"/>
							<s:Spacer width="10"/>
						</s:HGroup>
					</s:VGroup>

					<s:HGroup width="100%">
						<s:HGroup id="qualityHBox"
								  paddingLeft="0"
								  verticalAlign="middle">
							<s:Label text="指标任务收测间隔(秒)："/>
							<timecomp:TimeNew id="quality_sleeptime"
											  dateDisplay="time"/>
							<s:CheckBox label="电平"
										width="60"
										id="level"
										selected="true"
										toolTip="统一设置电平"
										click="selectQualityParam(level)"/>
							<s:CheckBox label="调幅度"
										width="60"
										id="am_mod"
										selected="false"
										toolTip="统一设置调幅度"
										click="selectQualityParam(am_mod)"/>
							<s:CheckBox label="调制度"
										width="60"
										id="fm_mod"
										selected="false"
										toolTip="统一设置调制度"
										click="selectQualityParam(fm_mod)"/>
							<s:CheckBox label="带宽"
										width="60"
										selected="true"
										id="bandwidth"
										toolTip="统一设置带宽"
										click="selectQualityParam(bandwidth)"/>
							<s:CheckBox label="报警"
										width="60" visible="false" includeInLayout="false"
										selected="true"
										id="qualityAlarm"
										toolTip="统一设置是否报警"
										click="selectQualityParam(qualityAlarm)"/>
						</s:HGroup>

						<s:HGroup width="100%"
								  id="offsetHBox"
								  verticalAlign="middle" paddingLeft="30">
							<s:Label text="频偏任务收测间隔(秒)："/>
							<timecomp:TimeNew id="offset_sleeptime"
											  dateDisplay="time"/>
						</s:HGroup>

					</s:HGroup>

					
					<s:VGroup width="100%"
							  id="streamHBox"
							  verticalAlign="middle"
							  paddingLeft="1">
						<s:HGroup width="100%"
								  verticalAlign="middle">
							<s:Button buttonMode="true" visible="false" includeInLayout="false" label="添加频道"
									  click="addPublicChannel();"
									  id="addCHButton"/>
							<s:CheckBox click="setSelectRecordAll(event)"
										id="recordLengthBox"
										label="统一设置"/>
						</s:HGroup>
						<!--s:CheckBox click="setSelectStream_sleeptime(event)" toolTip="统一设置收测间隔" id="Stream_sleeptimeBox"/>
						<s:Label text="录音任务收测间隔(秒)："/>
						<timecomp:TimeNew id="stream_sleeptime" dateDisplay="time"/>
						<s:Spacer width="2"/>
						<s:CheckBox click="setSelectRecordlength(event)" toolTip="统一设置文件长度" id="recordLengthBox"/>
						<s:Label text="录音文件长度："/>
						<timecomp:TimeNew id="recordlength" dateDisplay="time"/>
						<s:Spacer width="2"/>
						<s:CheckBox click="setSelectBps(event)" toolTip="统一设置码率" id="recordBpsBox"/>
						<s:Label text="码率："/>
						<s:DropDownList id="_bps" dataProvider="{DataManager.bpsColl}" selectedIndex="0" width="80"/-->

						<s:VGroup width="100%"
								  id="publicAddChannel">
						</s:VGroup>

						<s:HGroup id="recordOtherParam"
								  verticalAlign="middle"
								  visible="false">
							<s:Label text="步长"/>
							<s:TextInput width="30"
										 text="5"
										 id="record_setp"
										 restrict="0-9"/>
							<s:Label text="开始时间："/>
							<timecomp:TimeNew id="record_startDatetime"/>
							<s:Label text="结束时间："/>
							<timecomp:TimeNew id="record_endDatetime"/>
							<s:Label text="有效天数："/>
							<s:TextInput width="40"
										 text="30"
										 id="record_single_expiredays"
										 restrict="0-9"/>
						</s:HGroup>
					</s:VGroup>

					<!--mx:HRule strokeWidth="1" strokeColor="#a0a0a0" shadowColor="#000000" width="100%" /-->
					<s:VGroup id="ochannelTab"
							  verticalAlign="middle"
							  horizontalAlign="center"
							  width="100%">
						<s:VGroup id="channelVBox"
								  width="100%"
								  height="100%"
								  horizontalAlign="center"
								  verticalAlign="middle">
							<!--addTask:TaskChannel id="taskChannel" task_type="GeneralTask" height="100%"/-->
						</s:VGroup>
					</s:VGroup>

					<s:VGroup horizontalAlign="center"
							  verticalAlign="middle"
							  width="100%">
						<s:HGroup height="38"
								  width="100%"
								  horizontalAlign="center"
								  verticalAlign="middle">
							<s:Button buttonMode="true" label="生成任务"
									  id="sendTaskBtn"
									  click="sendTask();"/>
						</s:HGroup>

					</s:VGroup>
				</s:VGroup>
			</s:VGroup>
		</contaners:SimpleContainer>
	</s:VGroup>



</system:BasePage>
