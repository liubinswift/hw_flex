<?xml version="1.0" encoding="utf-8"?>
<system:BasePage xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark"  PAGE_SHOW="basepage1_PAGE_SHOWHandler(event)"
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:system="com.morcha4.frame.system.*" 
				 width="100%" height="100%" xmlns:global="com.viewscenes.global.*"  creationComplete="init()"
				 xmlns:timecomp="com.viewscenes.utils.timecomp.*" xmlns:flipBar="com.viewscenes.utils.flipBar.*">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.morcha4.RPC.RPCException;
			import com.morcha4.RPC.RPCManager;
			import com.morcha4.RPC.request.RORequestParam;
			import com.morcha4.frame.system.AdvancedEvent;
			import com.morcha4.frame.system.EventBus;
			import com.morcha4.util.RendererUtil;
			import com.viewscenes.beans.pub.ResHeadendBean;
			import com.viewscenes.beans.task.Task;
			import com.viewscenes.global.DataManager;
			import com.viewscenes.global.comp.MM;
			import com.viewscenes.global.comp.alert.MessagePrompt;
			import com.viewscenes.module.dailyBusiness.task.addTask.TaskChannel;
			import com.viewscenes.utils.StringTool;
			import com.viewscenes.utils.timecomp.DateUtil;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			[Bindable]
			public var sendTypeColl:ArrayCollection = new ArrayCollection(
				[ {label:"全部任务", data:"0"},
					{label:"临时任务", data:"1"}, 
					{label:"运行图", data:"2"} ]);
			public var sendReadyColl:ArrayCollection = new ArrayCollection(
				[  {label:"全部", data:"0"}, 
					{label:"未下发未审核", data:"1"}, 
					{label:"已审核未下发", data:"2"},
					{label:"下发失败", data:"3"},
					//{label:"等待下发", data:"4"},
					{label:"已下发", data:"5"}]);
			[Bindable]
			private var allselect:String="false";
		
			public var taskTypeColl:ArrayCollection = new ArrayCollection(
				[  {label:"全部", data:"0"}, 
					{label:"指标录音任务", data:"5"},
					{label:"指标任务", data:"1"}, 
					{label:"录音任务", data:"2"},
					{label:"频偏任务", data:"3"},
					{label:"频谱任务", data:"4"} ]);
			
			[Bindable]
			public var stationTypeColl:ArrayCollection = new ArrayCollection(
				[  
					{label:"设备A", data:"A"}, 
					{label:"设备B", data:"B"},
					{label:"设备C", data:"C"}, 
					{label:"设备D", data:"D"},
					{label:"设备E", data:"E"},
					{label:"设备F", data:"F"},
					{label:"设备G", data:"G"},
					{label:"设备H", data:"H"}
				]);
			
			[Bindable]
			public var receiver2Coll:ArrayCollection = new ArrayCollection(
				[  {label:"不指定", data:""},
					{label:"R1", data:"R1"}, 
					{label:"R2", data:"R2"}]);
			[Bindable]
			public var receiver1Coll:ArrayCollection = new ArrayCollection(
				[  {label:"不指定", data:""},
					{label:"R1", data:"R1"}]);
			[Bindable]
			public var receiver3Coll:ArrayCollection = new ArrayCollection(
				[  {label:"不指定", data:""},
					{label:"R1", data:"R1"}, 
					{label:"R2", data:"R2"},
					{label:"R3", data:"R3"}, 
					{label:"R4", data:"R4"},
					{label:"R5", data:"R5"}, 
					{label:"R6", data:"R6"},
					{label:"R7", data:"R7"}, 
					{label:"R8", data:"R8"},
					{label:"R9", data:"R9"}, 
					{label:"R10", data:"R10"},
					{label:"R11", data:"R11"}, 
					{label:"R12", data:"R12"},
					{label:"R13", data:"R13"}, 
					{label:"R14", data:"R14"},
					{label:"R15", data:"R15"}, 
					{label:"R16", data:"R16"},
					{label:"R17", data:"R17"}, 
					{label:"R18", data:"R18"},
					{label:"R19", data:"R19"}, 
					{label:"R20", data:"R20"},
					{label:"R21", data:"R21"}, 
					{label:"R22", data:"R22"},
					{label:"R23", data:"R23"}, 
					{label:"R24", data:"R24"},
					{label:"R25", data:"R25"}, 
					{label:"R26", data:"R26"},
					{label:"R27", data:"R27"}, 
					{label:"R28", data:"R28"},
					{label:"R29", data:"R29"}, 
					{label:"R30", data:"R30"},
					{label:"R31", data:"R31"}, 
					{label:"R32", data:"R32"}
				]);
			
			[Bindable]
			public var querydata:ArrayCollection = new ArrayCollection();
			/**
			 * 本次审核的任务ID  45,56,88,113,
			 */
			private var auditIDList:String = "";
			public function clickQueryTask1(event:AdvancedEvent):void{
				clickQueryTask();
			}
			/*
			**	任务查询方法
			*/
			public function clickQueryTask():void{
				con_clewlabel(clew_label,true,'正在查询，请稍候...');
				querydata = new ArrayCollection();
			
				var obj:Task = new Task();
				
				var codeNoAB:String = station.oStation.getHeadCode;
				var codeAB:String = station.oStation.getHeadABCode;
				var receiveEqu:String = station.oStation.getEquTypeValue;
				obj.equ_code = receiveEqu;
				if(codeNoAB == ""){
					obj.head_code = "";
				} else{
					obj.head_code = codeNoAB +","+codeAB;
				}
				
				obj.task_type = this.oTaskType.selectedItem.data;
				obj.is_send=this.osendReadyType.selectedItem.data;
				obj.is_temporary=this.ocreataTaskType.selectedItem.data;
				obj.valid_enddatetime=this.oEndValidDate.text;
				obj.valid_startdatetime	=this.oStartValidDate.text;
//				pagebar.m_sendCmd(new RORequestParam("com.viewscenes.web.task.TaskManager","queryAllTaskList",obj,clickQueryTaskProcess,
//					DataManager.showErrorMessageBack,true,null,DataManager.server_app_id));
				pagebar.m_sendCmd(new RORequestParam("com.viewscenes.web.task.TaskManager","queryAllTaskList",obj,clickQueryTaskProcess,
					DataManager.showErrorMessageBack,true,null,DataManager.server_app_id));
			}
			private function clickQueryTaskProcess(obj:ArrayCollection):void{
			//	MM.show(obj.length+"");
				con_clewlabel(clew_label,false);
				querydata.removeAll();
				querydata=obj;
					for(var i:int=0;i<querydata.length;i++){
						var task:Task = querydata.getItemAt(i) as Task;
						if(auditIDList.indexOf(task.task_id+",")>-1){
							task.isSelected = "true";
							querydata.setItemAt(task,i);
						}
					}
					auditIDList = "";
				if(obj.length==0){
					
					con_clewlabel(clew_label,true,"无查询数据！");
				}
				allselect="false";
			}
			
			/**
			 * 控制datagrid的提示框是否显示，以及显示内容
			 * author:cht
			 * **/
			public function con_clewlabel(_component:Label,_visible:Boolean,_label:String="")
			{
				_component.visible=_visible;
				_component.includeInLayout=_visible;
				_component.text=_label;
			}
			private function clickChooseAll():void{
				if(allselect=="false")
				{
					allselect="true";
				}else
				{
					allselect="false";	
				}
				
				for(var i:int=0;i<querydata.length;i++)
				{
					querydata.getItemAt(i).isSelected=allselect;
					querydata.refresh();
					datagrid.dataProvider = querydata;
				}
				
			
			}
			private function clickDeleteChooseComfirm():void{
				var dellist:ArrayCollection = new ArrayCollection();
				
				for(var i:int=0;i<querydata.length;i++)
				{
					if(querydata.getItemAt(i).isSelected=="true")
					{
                       
						dellist.addItem(querydata.getItemAt(i));

					}
				}
				
				if(dellist.length==0){
					
//					DataManager.showErrorMessage("请选择要删除的任务");
					MessagePrompt.show("请选择要删除的任务");
					return;
				}
			
				
				buttonGroup.enabled = false;
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.task.TaskManager","DelSyn_TaskList",dellist,clickDeleteChooseProcess,showErrorMessageBack,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request); 
				
			}
			private var del_number:int=0;
			private function AuthChooseAll():void{
				var dellist:String="";
				del_number=0;
				
				for(var i:int=0;i<querydata.length;i++)
				{
					if(querydata.getItemAt(i).isSelected=="true")
					{
					
						if(querydata.getItemAt(i).is_send=="已下达")
						{
							DataManager.showErrorMessage("选择审核任务中有已经下达过的任务，请重新选择审核任务。");	
							return;
						}
							if(del_number==0)
							{
								dellist = querydata.getItemAt(i).task_id;
								del_number++;
							} else{
								dellist += ","+querydata.getItemAt(i).task_id;
								del_number++;
							}
					}
				}
				
				if(dellist.length==0){
				
					DataManager.showErrorMessage("请选择要审核的任务");
					return;
				}
				var obj:Object = new Object();
				
				obj.authList = dellist;
			    obj.userName=DataManager.user.userName;
		
				auditIDList = dellist+",";
				
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.task.TaskManager","authSyn_Task",obj,AuthChooseAllProcess,DataManager.showErrorMessageBack,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request); 
				
			}
			private function AuthChooseAllProcess(obj:Object):void{
				DataManager.showErrorMessage("成功审核所选任务。");
				clickQueryTask();
			}
			private function sendChooseAll():void{
				var dellist:ArrayCollection = new ArrayCollection();
			
				for(var i:int=0;i<querydata.length;i++)
				{
					if(querydata.getItemAt(i).isSelected=="true")
					{
					        if(querydata.getItemAt(i).is_send=="已下达"||querydata.getItemAt(i).authentic_user=="")
							{
								DataManager.showErrorMessage("选择下发任务中有已经下达过的任务或者未审核的任务，请重新选择下发任务。");	
								return;
							}
							
							querydata.getItemAt(i).send_user=DataManager.user.userName;
							dellist.addItem(querydata.getItemAt(i));
							
					
					}
					

				}
	
				if(dellist.length==0){

					DataManager.showErrorMessage("请选择要下发的任务");
					return;
				}
				buttonGroup.enabled = false;
				var request:RORequestParam = new RORequestParam("com.viewscenes.web.task.TaskManager","sendSyn_Task",dellist,sendChooseAllProcess,showErrorMessageBack,true,null,DataManager.server_app_id);
				RPCManager.sendCmd(request); 
				
			}
			private function sendChooseAllProcess(returnArray:ArrayCollection):void{
				var successCount:String=returnArray.getItemAt(0).toString();
				var faileCount:String=returnArray.getItemAt(1).toString();
				var message:String=returnArray.getItemAt(2).toString();
				DataManager.showErrorMessage("成功下发任务"+successCount+"个。\r"+"下发任务失败"+faileCount+"个。\r失败详细："+message+"\r");
				
				buttonGroup.enabled = true;
				clickQueryTask();
			}
			private function showErrorMessageBack(obj:RPCException):void{
				buttonGroup.enabled = true;
				MM.show(obj.message,"服务器异常");
			}
			/**
			 * 下发全部任务（当前查询条件查到的任务）
			 */
			private function sendAllTask():void{
				var obj:Task = new Task();
				
				var codeNoAB:String = station.oStation.getHeadCode;
				var codeAB:String = station.oStation.getHeadABCode;
				var receiveEqu:String = station.oStation.getEquTypeValue;
				obj.equ_code = receiveEqu;
				if(codeNoAB == ""){
					obj.head_code = "";
				} else{
					obj.head_code = codeNoAB +","+codeAB;
				}
				
				obj.task_type = this.oTaskType.selectedItem.data;
				obj.is_send=this.osendReadyType.selectedItem.data;
				obj.is_temporary=this.ocreataTaskType.selectedItem.data;
				obj.valid_enddatetime=this.oEndValidDate.text;
				obj.valid_startdatetime	=this.oStartValidDate.text;
				buttonGroup.enabled = false;
				RPCManager.sendCmd(new RORequestParam("com.viewscenes.web.task.TaskManager","sendAllTask",obj,sendAllTaskProcess,
					showErrorMessageBack,true,null,DataManager.server_app_id));
			}
			
			private function sendAllTaskProcess(returnArray:ArrayCollection):void{
				var successCount:String=returnArray.getItemAt(0).toString();
				var faileCount:String=returnArray.getItemAt(1).toString();
				var message:String=returnArray.getItemAt(2).toString();
				DataManager.showErrorMessage("成功下发任务"+successCount+"个。\r"+"下发任务失败"+faileCount+"个。\r失败详细：\r"+message);
				
				buttonGroup.enabled = true;
				clickQueryTask();
			}
			private function clickDeleteChooseProcess(retStr:ArrayCollection):void{
				var successCount:String=retStr.getItemAt(0).toString();
				var faileCount:String=retStr.getItemAt(1).toString();
				var message:String=retStr.getItemAt(2).toString();
				if(faileCount=="0")
				{
					DataManager.showErrorMessage("成功删除任务"+successCount+"个.");
						
				}else 
					DataManager.showErrorMessage("成功删除任务"+successCount+"个。\r"+"删除任务失败"+faileCount+"个。\r失败详细：\r"+message);
				
				buttonGroup.enabled = true;
				clickQueryTask();
			}
			//选择点中后执行的方法
			[Bindable]
			public var selectedCounts:int =0;
			private function changeSelect(obj:Object):void{
				
				if(obj.data.isSelected=="true"){
					this.selectedCounts=selectedCounts+1;  
				}else{
					this.selectedCounts=selectedCounts-1; 
				}
			}
			private function getTaskStatus(obj:Object):void{
				
				
				if(obj.data.is_send=="已下达")
				{
						if(DataManager.getHeadendIsOnline( obj.data.head_code)==false)
						{
							var task:Object = new Object();
							
							task.stationCode = obj.data.head_code
							task.task_id=obj.data.task_id;
							task.userid=DataManager.user.userId;
							var request:RORequestParam = new RORequestParam("com.viewscenes.web.task.TaskManager","getTaskStatus",task,getTaskStatusProcess,DataManager.showErrorMessageBack,true,null,DataManager.server_app_id);
							RPCManager.sendCmd(request); 
						}else 
						{
							DataManager.showErrorMessage("站点不在线，无法查看任务执行状态！");
							return ;
						}
				}else 
				{
					DataManager.showErrorMessage("任务还没有下发，无法查看任务执行状态！");
				     return ;
				}
			
			
				
			}
			private function getTaskStatusProcess(retStr:String):void{
				
			DataManager.showErrorMessage(retStr);
					
			}
			private function getTaskDesc(obj:Object):void{
			
				var taskResult:TaskDesc = TaskDesc(PopUpManager.createPopUp(this,TaskDesc,true,null));
				var nobj:Object = new Object;
				nobj.data = obj.data;
				nobj.pageType = "query";
				taskResult.onShowTaskData(nobj);
		
				PopUpManager.centerPopUp(taskResult);
//				taskResult.x=50;
//				taskResult.y=50;

				
			}
			private function closeHandler(event:Event):void {
			
				PopUpManager.removePopUp(this);
			}

			protected function init():void
			{
				var date:String = DateUtil.date2str(new Date(),"date");
				oStartValidDate.text = date+" 00:00:00";
				EventBus.addEventListener("TASK_QUERY",clickQueryTask1);
			}
			
			protected function basepage1_PAGE_SHOWHandler(event:Event):void
			{
				// TODO Auto-generated method stub
				oEndValidDate.setDate(new Date());
			}
			/**
			 * 修改任务执行设备
			 * 
			 * */
			private function updateABCD():void{
			
				var changeABCD=this.oStationType.selectedItem.data;
					var sql:String="update radio_unify_task_tab t set  t.is_delete=0,equ_code='"+this.oReceiver.selectedItem.data+"',head_code=substr(head_code,0,length(head_code)-1)||'"+changeABCD+"' where task_id in('";
					var sql2:String ="update  radio_sub_task_tab t set equ_code= '"+this.oReceiver.selectedItem.data+"' where task_id in('";
					var selectOne:Boolean=false;
					for(var i:int=0;i<querydata.length;i++)
					{
						if(querydata.getItemAt(i).isSelected=="true")
						{
							var obj:Task = querydata.getItemAt(i) as Task;
							
							sql+=obj.task_id+"','"
							sql2+=obj.task_id+"','"
							selectOne=true
								if(obj.is_send=="已下达")
								{
									MM.show("请去掉已经下发成功的任务！");	
									return;
								}
						}
					}
					sql=sql.substring(0,sql.length-2)+")";
					sql2=sql2.substring(0,sql2.length-2)+")";
					
					if(!selectOne){
						
						//					DataManager.showErrorMessage("请选择要删除的任务");
						MM.show("请选择要更新执行设备的任务！");
						return;
						
					}
					
					buttonGroup.enabled = false;
					var request:RORequestParam = new RORequestParam("com.viewscenes.web.task.TaskManager","updateSelectTask",sql+";"+sql2,clickUpdateChooseProcess,showErrorMessageBack,true,null,DataManager.server_app_id);
					RPCManager.sendCmd(request); 
					
				}
			private function clickUpdateChooseProcess(res:String):void{
				buttonGroup.enabled = true;
				DataManager.showErrorMessage(res);
				clickQueryTask();
				
			}
			private function stationChange():void{
			  if(this.oStationType.selectedItem.data=="A")
			  {
				  this.oReceiver.dataProvider=receiver1Coll;
				  
			  }else if(this.oStationType.selectedItem.data=="H")
			  {
				  this.oReceiver.dataProvider=receiver3Coll;
				  
			  }else{
				  this.oReceiver.dataProvider=receiver2Coll; 
			  }
			  this.oReceiver.selectedIndex=0;
			}
			
		]]>
	</fx:Script>
	
			 <s:VGroup  width="100%"  height="100%" paddingTop="30" >
				<s:HGroup width="100%" verticalAlign="middle" paddingLeft="10">
				
					<global:HeadendAllAndStateList id="station"   headDataAll="true"/>
					<s:Label text="任务类型："/>
					<s:DropDownList id="oTaskType" dataProvider="{taskTypeColl}"   selectedIndex="0" width="90" />
					<s:Spacer width="10"/>
					<s:Label text="任务下发状态："/>
					<s:DropDownList id="osendReadyType" dataProvider="{sendReadyColl}"  selectedIndex="0"/>
					<s:Spacer width="10"/>
					<s:Label text="生成方式："/>
					<s:DropDownList id="ocreataTaskType" dataProvider="{sendTypeColl}"  selectedIndex="0" />
				</s:HGroup>
				 <mx:HRule strokeWidth="1" strokeColor="#a0a0a0" shadowColor="#000000" width="100%" />
				 <s:HGroup width="100%" verticalAlign="middle" paddingLeft="10">
					 <s:Label text="开始时间"/>
					 <timecomp:TimeNew  id="oStartValidDate"/>
					 <s:Spacer width="10"/>
					 <s:Label text="结束时间" />
					 <timecomp:TimeNew  id="oEndValidDate"/>
					 <s:Button buttonMode="true" click="clickQueryTask();" label="任务查询" />
					 <s:Spacer width="26"/>
					 <s:Button buttonMode="true" click="clickChooseAll();" label="全选" />
					 <s:Button buttonMode="true" click="AuthChooseAll();" label="审核选中任务"/>
					 <s:HGroup   id="buttonGroup" verticalAlign="middle">
						 <s:Button buttonMode="true" click="clickDeleteChooseComfirm();"  label="删除所选任务" />
						 <s:Button buttonMode="true" click="sendChooseAll();" label="下发选中任务" />
						 <s:Button buttonMode="true" click="sendAllTask();" label="下发全部任务" />
						 <s:Label text="执行设备" />
						 <s:DropDownList id="oStationType" dataProvider="{stationTypeColl}"  change="stationChange()"  selectedIndex="0" width="90" />
						 <s:Label text="接收机" />
						 <s:DropDownList id="oReceiver" dataProvider="{receiver1Coll}"   selectedIndex="0" width="90" />
						 
						 <s:Button buttonMode="true" click="updateABCD();" label="批量更新执行设备"   />
					 </s:HGroup>
					 <s:Spacer width="26"/>
					
				</s:HGroup>
			
	 
				 <s:Group width="100%" height="100%">
					<s:DataGrid id="datagrid" width="100%"    textAlign="center" height="100%" dataProvider="{querydata}"  showDataTips="true">
						<s:columns>  
							<s:ArrayCollection>
								
							<s:GridColumn headerText="选择"  itemRenderer="{RendererUtil.getCheckBoxRenderer(changeSelect)}" />
						
							<s:GridColumn headerText="状态" itemRenderer="{RendererUtil.getButtonRenderer('状态',getTaskStatus,null)}" >
							
							</s:GridColumn>
					
							<s:GridColumn headerText="类型" dataField="task_type" width="100"/>
							<s:GridColumn headerText="是否下达" dataField="is_send" />
							<s:GridColumn headerText="生成时间 " dataField="batch_no" width="120" />
							<s:GridColumn headerText="生成方式 " dataField="is_temporary" width="100" />
							<s:GridColumn headerText="有效期" dataField="validDate" width="200"        />
							<s:GridColumn headerText="发送站点" dataField="shortname" />
							<s:GridColumn headerText="频率" dataField="freq"  width="70"/>
							<s:GridColumn headerText="播音时间" dataField="play_time" width="90" />
							<s:GridColumn headerText="语言" dataField="language"  />
							<s:GridColumn headerText="发射台" dataField="station_name"  />
							<!--s:GridColumn headerText="创建人" dataField="create_user"/-->	
							<s:GridColumn headerText="审核人" dataField="authentic_user"  />
							<s:GridColumn headerText="发送人" dataField="send_user" />
							<s:GridColumn headerText="详细" itemRenderer="{RendererUtil.getButtonRenderer('详细',getTaskDesc,null)}">	
							</s:GridColumn>
								</s:ArrayCollection>
							</s:columns>
					</s:DataGrid>
					 <s:Label text="正在查询，请稍候..."   fontSize="12" textAlign="center" color="0x000000" id="clew_label" y="{datagrid.columnHeaderGroup.height+10}" width="100%" visible="false" includeInLayout="false" />				
					 
				 </s:Group>
				
					 <flipBar:PageBar width="100%" height="20" id="pagebar" rowConutOfPage="25" totalPageQuery="4" />
			
		</s:VGroup>
	
	
</system:BasePage>
